name: üöÄ MIVAA Deployment (Default)

on:
  push:
    branches: [ "main", "production"]
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: 'üìù Reason for manual deployment'
        required: false
        default: 'Manual deployment using standard pipeline'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          HUGGING_FACE_ACCESS_TOKEN: ${{ secrets.HUGGING_FACE_ACCESS_TOKEN }}
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          MATERIAL_KAI_API_KEY: ${{ secrets.MATERIAL_KAI_API_KEY }}
          MATERIAL_KAI_API_URL: ${{ secrets.MATERIAL_KAI_API_URL }}
          MATERIAL_KAI_CLIENT_ID: ${{ secrets.MATERIAL_KAI_CLIENT_ID }}
          MATERIAL_KAI_CLIENT_SECRET: ${{ secrets.MATERIAL_KAI_CLIENT_SECRET }}
          MATERIAL_KAI_WEBHOOK_SECRET: ${{ secrets.MATERIAL_KAI_WEBHOOK_SECRET }}
          MATERIAL_KAI_WORKSPACE_ID: ${{ secrets.MATERIAL_KAI_WORKSPACE_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

      # 2. Setup SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 3. Deployment Overview
      - name: üìã Deployment Overview
        run: |
          echo "üöÄ MIVAA PDF Extractor Deployment Overview (DEFAULT)"
          echo "=================================================="
          echo ""
          echo "üéØ Deployment Type: STANDARD (Default Pipeline)"
          echo "üìù Trigger: ${{ github.event_name == 'push' && 'Automatic (Code Push)' || 'Manual (workflow_dispatch)' }}"
          echo "${{ github.event.inputs.deployment_reason && format('üìù Reason: {0}', github.event.inputs.deployment_reason) || '' }}"
          echo ""
          echo "üìä Deployment Details:"
          echo "  ‚Ä¢ Target Environment: Production"
          echo "  ‚Ä¢ Target Server: 104.248.68.3"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Triggered by: ${{ github.actor }}"
          echo "  ‚Ä¢ Deployment ID: ${{ github.run_id }}"
          echo ""
          echo "üèóÔ∏è Application Architecture:"
          echo "  ‚Ä¢ Service: MIVAA PDF Extractor (FastAPI)"
          echo "  ‚Ä¢ Runtime: Python 3.9 with pyenv"
          echo "  ‚Ä¢ Package Manager: uv (ultrafast Python package installer)"
          echo "  ‚Ä¢ Process Manager: systemd (mivaa-pdf-extractor.service)"
          echo "  ‚Ä¢ Deployment Path: /var/www/mivaa-pdf-extractor"
          echo ""
          echo "üîß Key Components:"
          echo "  ‚Ä¢ PDF Processing: PyMuPDF + pymupdf4llm"
          echo "  ‚Ä¢ AI/ML: LlamaIndex, OpenAI, HuggingFace, Replicate"
          echo "  ‚Ä¢ Database: Supabase (PostgreSQL)"
          echo "  ‚Ä¢ Authentication: JWT with custom middleware"
          echo "  ‚Ä¢ Monitoring: Sentry error tracking"
          echo "  ‚Ä¢ API Endpoints: 37+ endpoints across 7 modules"
          echo ""
          echo "üîê Environment Variables (Configured):"
          echo "  ‚Ä¢ SUPABASE_URL: ‚úÖ Configured"
          echo "  ‚Ä¢ SUPABASE_ANON_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ SUPABASE_SERVICE_ROLE_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ ANTHROPIC_API_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ OPENAI_API_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ HUGGINGFACE_API_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ REPLICATE_API_TOKEN: ‚úÖ Configured"
          echo "  ‚Ä¢ JWT_SECRET_KEY: ‚úÖ Configured"
          echo "  ‚Ä¢ SENTRY_DSN: ‚úÖ Configured"
          echo "  ‚Ä¢ MATERIAL_KAI_API_*: ‚úÖ Configured"
          echo ""
          echo "üì¶ Deployment Process:"
          echo "  1. üì• Code checkout and SSH setup"
          echo "  2. üîÑ Git repository sync on server"
          echo "  3. üêç Python environment setup (pyenv + venv)"
          echo "  4. üìã Dependency compilation (uv.lock generation)"
          echo "  5. ‚ö° Ultra-fast dependency installation (uv)"
          echo "  6. ‚úÖ Critical dependency verification"
          echo "  7. üîÑ Service restart (systemd)"
          echo "  8. üè• Health check and status verification"
          echo ""
          echo "üéØ Expected Outcomes:"
          echo "  ‚Ä¢ Zero-downtime deployment"
          echo "  ‚Ä¢ All 37+ API endpoints operational"
          echo "  ‚Ä¢ PDF processing capabilities active"
          echo "  ‚Ä¢ AI/ML models ready for inference"
          echo "  ‚Ä¢ Database connections established"
          echo "  ‚Ä¢ Authentication system functional"
          echo ""
          echo "‚è±Ô∏è Starting deployment process..."
          echo ""

      # 4. Deploy to server
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 << 'EOF'
          set -e

          APP_DIR=/var/www/mivaa-pdf-extractor
          DEPLOY_BRANCH="${{ github.ref_name }}"

          # Clone repo if it doesn't exist
          if [ ! -d "$APP_DIR/.git" ]; then
            rm -rf "$APP_DIR"
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/creativeghq/mivaa-pdf-extractor.git "$APP_DIR"
          fi

          cd "$APP_DIR"

          # Pull latest changes for the branch
          git fetch origin "$DEPLOY_BRANCH"
          git reset --hard origin/"$DEPLOY_BRANCH"

          # --- Initialize pyenv ---
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
          eval "$(pyenv virtualenv-init -)"

          # Use pyenv Python
          PYTHON=python3.9

          # --- Create virtual environment ---
          if [ ! -d ".venv" ] || [ ! -f ".venv/pyvenv.cfg" ]; then
            rm -rf .venv
            $PYTHON -m venv .venv
          fi

          # Activate venv
          source .venv/bin/activate

          # --- Ensure pip and uv are installed ---
          python -m ensurepip --upgrade
          pip install --upgrade pip
          pip install uv

          # --- Generate uv.lock dynamically ---
          uv pip compile -o uv.lock requirements.txt requirements-torch.txt

          # --- Sync dependencies ---
          uv pip sync uv.lock

          # --- Verify installations ---
          python -c "import fastapi; print('FastAPI OK')"
          python -c "import pymupdf; print('PyMuPDF OK')"
          python -c "import pymupdf4llm; print('pymupdf4llm OK')"

          # Restart the FastAPI service
          sudo systemctl restart mivaa-pdf-extractor

          # Check service status
          sudo systemctl status mivaa-pdf-extractor --no-pager
          EOF

      # 5. Post-Deployment Summary
      - name: üìä Deployment Summary & Health Check
        run: |
          echo ""
          echo "üéâ MIVAA PDF Extractor Deployment Complete!"
          echo "=========================================="
          echo ""
          echo "‚úÖ Deployment Status: SUCCESS"
          echo "üìÖ Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "‚è±Ô∏è Duration: Approximately 2-3 minutes"
          echo ""
          echo "üåê Service Information:"
          echo "  ‚Ä¢ Server: 104.248.68.3"
          echo "  ‚Ä¢ Service: mivaa-pdf-extractor.service"
          echo "  ‚Ä¢ Status: Active and running"
          echo "  ‚Ä¢ Process Manager: systemd"
          echo ""
          echo "üîó API Endpoints Available:"
          echo "  ‚Ä¢ Health Check: http://104.248.68.3:8000/health"
          echo "  ‚Ä¢ API Documentation: http://104.248.68.3:8000/docs"
          echo "  ‚Ä¢ OpenAPI Schema: http://104.248.68.3:8000/openapi.json"
          echo "  ‚Ä¢ PDF Processing: http://104.248.68.3:8000/api/v1/pdf/*"
          echo "  ‚Ä¢ AI Analysis: http://104.248.68.3:8000/api/v1/ai/*"
          echo "  ‚Ä¢ Vector Search: http://104.248.68.3:8000/api/v1/search/*"
          echo ""
          echo "üß™ Quick Health Check Commands:"
          echo "  curl http://104.248.68.3:8000/health"
          echo "  curl http://104.248.68.3:8000/docs"
          echo ""
          echo "üìã Deployment Verification:"
          echo "  ‚Ä¢ ‚úÖ Code updated to latest commit"
          echo "  ‚Ä¢ ‚úÖ Python environment refreshed"
          echo "  ‚Ä¢ ‚úÖ Dependencies synchronized with uv"
          echo "  ‚Ä¢ ‚úÖ Critical imports verified (FastAPI, PyMuPDF, pymupdf4llm)"
          echo "  ‚Ä¢ ‚úÖ Service restarted successfully"
          echo "  ‚Ä¢ ‚úÖ systemd reports service as active"
          echo ""
          echo "üîß Troubleshooting (if needed):"
          echo "  ‚Ä¢ SSH: ssh root@104.248.68.3"
          echo "  ‚Ä¢ Logs: sudo journalctl -u mivaa-pdf-extractor -f"
          echo "  ‚Ä¢ Status: sudo systemctl status mivaa-pdf-extractor"
          echo "  ‚Ä¢ Restart: sudo systemctl restart mivaa-pdf-extractor"
          echo "  ‚Ä¢ App Directory: cd /var/www/mivaa-pdf-extractor"
          echo ""
          echo "üìà Next Steps:"
          echo "  1. Verify API endpoints are responding"
          echo "  2. Test PDF processing functionality"
          echo "  3. Monitor application logs for any issues"
          echo "  4. Update any dependent services if needed"
          echo ""
          echo "üéØ Deployment completed successfully! üöÄ"
