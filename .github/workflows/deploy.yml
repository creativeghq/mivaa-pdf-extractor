name: 🚀 MIVAA Deployment (Default)

on:
  push:
    branches: [ "main", "production"]
  workflow_dispatch:
    inputs:
      deployment_reason:
        description: '📝 Reason for manual deployment'
        required: false
        default: 'Manual deployment using standard pipeline'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          FIRECRAWL_API_KEY: ${{ secrets.FIRECRAWL_API_KEY }}
          HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
          HUGGING_FACE_ACCESS_TOKEN: ${{ secrets.HUGGING_FACE_ACCESS_TOKEN }}
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          MATERIAL_KAI_API_KEY: ${{ secrets.MATERIAL_KAI_API_KEY }}
          MATERIAL_KAI_API_URL: ${{ secrets.MATERIAL_KAI_API_URL }}
          MATERIAL_KAI_CLIENT_ID: ${{ secrets.MATERIAL_KAI_CLIENT_ID }}
          MATERIAL_KAI_CLIENT_SECRET: ${{ secrets.MATERIAL_KAI_CLIENT_SECRET }}
          MATERIAL_KAI_WEBHOOK_SECRET: ${{ secrets.MATERIAL_KAI_WEBHOOK_SECRET }}
          MATERIAL_KAI_WORKSPACE_ID: ${{ secrets.MATERIAL_KAI_WORKSPACE_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

      # 2. Setup SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      # 3. Deployment Overview & Summary
      - name: 📋 Deployment Overview & Summary
        run: |
          echo "🚀 MIVAA PDF Extractor Deployment Overview (DEFAULT)"
          echo "=================================================="
          echo ""
          echo "🎯 Deployment Type: STANDARD (Default Pipeline)"
          echo "📝 Trigger: ${{ github.event_name == 'push' && 'Automatic (Code Push)' || 'Manual (workflow_dispatch)' }}"
          echo "${{ github.event.inputs.deployment_reason && format('📝 Reason: {0}', github.event.inputs.deployment_reason) || '' }}"
          echo ""
          echo "📊 Deployment Details:"
          echo "  • Target Environment: Production"
          echo "  • Target Server: 104.248.68.3"
          echo "  • Branch: ${{ github.ref_name }}"
          echo "  • Commit: ${{ github.sha }}"
          echo "  • Triggered by: ${{ github.actor }}"
          echo "  • Deployment ID: ${{ github.run_id }}"

          # Add to GitHub Step Summary (visible on main action page)
          echo "# 🚀 MIVAA Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Deployment Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **🎯 Deployment Type** | STANDARD (Default Pipeline) |" >> $GITHUB_STEP_SUMMARY
          echo "| **📝 Trigger** | ${{ github.event_name == 'push' && 'Automatic (Code Push)' || 'Manual (workflow_dispatch)' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **🌿 Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **📋 Commit** | [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **👤 Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **🆔 Deployment ID** | \`${{ github.run_id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **🎯 Target Environment** | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| **🖥️ Target Server** | 104.248.68.3 |" >> $GITHUB_STEP_SUMMARY
          echo "| **⏰ Started** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add reason if provided
          if [[ -n "${{ github.event.inputs.deployment_reason }}" ]]; then
            echo "| **📝 Deployment Reason** | ${{ github.event.inputs.deployment_reason }} |" >> $GITHUB_STEP_SUMMARY
          fi
          echo ""
          echo "🏗️ Application Architecture:"
          echo "  • Service: MIVAA PDF Extractor (FastAPI)"
          echo "  • Runtime: Python 3.9 with pyenv"
          echo "  • Package Manager: uv (ultrafast Python package installer)"
          echo "  • Process Manager: systemd (mivaa-pdf-extractor.service)"
          echo "  • Deployment Path: /var/www/mivaa-pdf-extractor"
          echo ""
          echo "🔧 Key Components:"
          echo "  • PDF Processing: PyMuPDF + pymupdf4llm"
          echo "  • AI/ML: LlamaIndex, OpenAI, HuggingFace, Replicate"
          echo "  • Database: Supabase (PostgreSQL)"
          echo "  • Authentication: JWT with custom middleware"
          echo "  • Monitoring: Sentry error tracking"
          echo "  • API Endpoints: 37+ endpoints across 7 modules"

          # Add architecture to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Application Architecture" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **🚀 Service** | MIVAA PDF Extractor (FastAPI) |" >> $GITHUB_STEP_SUMMARY
          echo "| **🐍 Runtime** | Python 3.9 with pyenv |" >> $GITHUB_STEP_SUMMARY
          echo "| **📦 Package Manager** | uv (ultrafast Python package installer) |" >> $GITHUB_STEP_SUMMARY
          echo "| **⚙️ Process Manager** | systemd (mivaa-pdf-extractor.service) |" >> $GITHUB_STEP_SUMMARY
          echo "| **📁 Deployment Path** | /var/www/mivaa-pdf-extractor |" >> $GITHUB_STEP_SUMMARY
          echo "| **📄 PDF Processing** | PyMuPDF + pymupdf4llm |" >> $GITHUB_STEP_SUMMARY
          echo "| **🤖 AI/ML** | LlamaIndex, OpenAI, HuggingFace, Replicate |" >> $GITHUB_STEP_SUMMARY
          echo "| **🗄️ Database** | Supabase (PostgreSQL) |" >> $GITHUB_STEP_SUMMARY
          echo "| **🔐 Authentication** | JWT with custom middleware |" >> $GITHUB_STEP_SUMMARY
          echo "| **📊 Monitoring** | Sentry error tracking |" >> $GITHUB_STEP_SUMMARY
          echo "| **🌐 API Endpoints** | 37+ endpoints across 7 modules |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add initial deployment status (final package status will be added after installation)
          echo "## 🚀 Deployment Progress" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Initialization** | ✅ Complete | Deployment started successfully |" >> $GITHUB_STEP_SUMMARY
          echo "| **System Setup** | 🟡 In Progress | Installing system dependencies |" >> $GITHUB_STEP_SUMMARY
          echo "| **Python Packages** | ⏳ Pending | Installing Python packages |" >> $GITHUB_STEP_SUMMARY
          echo "| **Service Restart** | ⏳ Pending | Restarting application service |" >> $GITHUB_STEP_SUMMARY
          echo "| **Health Check** | ⏳ Pending | Verifying deployment health |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> 📝 **Note**: Detailed package installation status will be shown after the installation completes." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "🔐 Environment Variables (Configured):"
          echo "  • SUPABASE_URL: ✅ Configured"
          echo "  • SUPABASE_ANON_KEY: ✅ Configured"
          echo "  • SUPABASE_SERVICE_ROLE_KEY: ✅ Configured"
          echo "  • ANTHROPIC_API_KEY: ✅ Configured"
          echo "  • OPENAI_API_KEY: ✅ Configured"
          echo "  • HUGGINGFACE_API_KEY: ✅ Configured"
          echo "  • REPLICATE_API_TOKEN: ✅ Configured"
          echo "  • JWT_SECRET_KEY: ✅ Configured"
          echo "  • SENTRY_DSN: ✅ Configured"
          echo "  • MATERIAL_KAI_API_*: ✅ Configured"
          echo ""
          echo "📦 Deployment Process:"
          echo "  1. 📥 Code checkout and SSH setup"
          echo "  2. 🔄 Git repository sync on server"
          echo "  3. 🐍 Python environment setup (pyenv + venv)"
          echo "  4. 📋 Dependency compilation (uv.lock generation)"
          echo "  5. ⚡ Ultra-fast dependency installation (uv)"
          echo "  6. 🔧 Critical package installation (OpenCV, FastAPI, etc.)"
          echo "  7. ✅ Comprehensive package verification (all requirements.txt)"
          echo "  8. 🔄 Service restart (systemd)"
          echo "  9. 🏥 Health check and status verification"
          echo "  10. 📊 Package status reporting in deployment summary"
          echo ""
          echo "🎯 Expected Outcomes:"
          echo "  • Zero-downtime deployment"
          echo "  • All 37+ API endpoints operational"
          echo "  • PDF processing capabilities active"
          echo "  • AI/ML models ready for inference"
          echo "  • Database connections established"
          echo "  • Authentication system functional"
          echo ""
          echo "⏱️ Starting deployment process..."
          echo ""

      # 4.1. Setup deployment environment
      - name: 🔧 Setup deployment environment
        run: |
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          set -e

          # Function to handle errors
          handle_error() {
            echo \"❌ Error occurred: \\\$1\"
            echo \"📝 Creating error report...\"

            # Create simple error report
            echo '| Package | Category | Description | Status | Version |' > package_status_report.txt
            echo '|---------|----------|-------------|--------|---------|' >> package_status_report.txt
            echo '| **System Dependencies** | System | Ubuntu packages for PyMuPDF | 🔴 Failed | N/A |' >> package_status_report.txt
            echo '| **Python Environment** | Runtime | Virtual environment setup | 🟡 Partial | N/A |' >> package_status_report.txt
            echo '| **Package Installation** | Dependencies | Python package installation | 🔴 Failed | N/A |' >> package_status_report.txt
            echo '| **Deployment Status** | Overall | Complete deployment process | 🔴 Failed | N/A |' >> package_status_report.txt

            # Capture error logs
            echo \"📋 Capturing error logs...\"
            echo '=== DEPLOYMENT ERROR LOGS ===' > deployment_error_logs.txt
            echo \"Error: \\\$1\" >> deployment_error_logs.txt
            echo \"Time: \\\$(date)\" >> deployment_error_logs.txt
            echo \"Working Directory: \\\$(pwd)\" >> deployment_error_logs.txt
            echo \"Python Version: \\\$(python --version 2>&1)\" >> deployment_error_logs.txt
            echo \"Pip Version: \\\$(pip --version 2>&1)\" >> deployment_error_logs.txt
            echo \"Virtual Environment: \\\$(which python)\" >> deployment_error_logs.txt
            echo \"Recent pip install output:\" >> deployment_error_logs.txt
            tail -20 /tmp/pip-install.log 2>/dev/null >> deployment_error_logs.txt || echo 'No pip install log available' >> deployment_error_logs.txt

            echo \"📊 Error report and logs created\"
            exit 1
          }

          # Trap errors
          trap 'handle_error \"Deployment script failed at line \\\$LINENO\"' ERR

          APP_DIR=/var/www/mivaa-pdf-extractor
          DEPLOY_BRANCH=\"${{ github.ref_name }}\"

          # Clone repo if it doesn't exist
          if [ ! -d \"\$APP_DIR/.git\" ]; then
            rm -rf \"\$APP_DIR\"
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/creativeghq/mivaa-pdf-extractor.git \"\$APP_DIR\"
          fi

          cd \"\$APP_DIR\"

          # Pull latest changes for the branch
          git fetch origin \"\$DEPLOY_BRANCH\"
          git reset --hard origin/\"\$DEPLOY_BRANCH\"

          # --- Initialize pyenv ---
          export PATH=\"\$HOME/.pyenv/bin:\$PATH\"
          eval \"\$(pyenv init --path)\"
          eval \"\$(pyenv init -)\"
          eval \"\$(pyenv virtualenv-init -)\"

          # Use pyenv Python
          PYTHON=python3.9

          # --- Create virtual environment ---
          if [ ! -d \".venv\" ] || [ ! -f \".venv/pyvenv.cfg\" ]; then
            rm -rf .venv
            \$PYTHON -m venv .venv
          fi

          # Activate venv
          source .venv/bin/activate

          # Set library path for MuPDF
          export LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH\"
          echo \"LD_LIBRARY_PATH set to: \$LD_LIBRARY_PATH\"

          # --- Install system dependencies for PyMuPDF ---
          echo 'Installing system dependencies for PyMuPDF...'

          # Create initial status report
          echo '| Package | Category | Description | Status | Version |' > package_status_report.txt
          echo '|---------|----------|-------------|--------|---------|' >> package_status_report.txt
          echo '| **System Dependencies** | System | Ubuntu packages for PyMuPDF | 🟡 Installing... | N/A |' >> package_status_report.txt
          echo '| **Python Environment** | Runtime | Virtual environment setup | 🟢 Ready | N/A |' >> package_status_report.txt
          echo '| **Package Installation** | Dependencies | Python package installation | 🟡 Pending... | N/A |' >> package_status_report.txt

          # Try to install system dependencies (non-critical)
          apt-get update -qq 2>/dev/null || echo 'Warning: apt update had issues'

          # Install packages individually to avoid failure if one is missing
          echo 'Installing system packages individually...'
          apt-get install -y -qq libfreetype6-dev 2>/dev/null && echo \"✅ Installed: libfreetype6-dev\" || echo \"⚠️ Skipped: libfreetype6-dev (not available)\"
          apt-get install -y -qq libfontconfig1-dev 2>/dev/null && echo \"✅ Installed: libfontconfig1-dev\" || echo \"⚠️ Skipped: libfontconfig1-dev (not available)\"
          apt-get install -y -qq libjpeg-dev 2>/dev/null && echo \"✅ Installed: libjpeg-dev\" || echo \"⚠️ Skipped: libjpeg-dev (not available)\"
          apt-get install -y -qq libopenjp2-7-dev 2>/dev/null && echo \"✅ Installed: libopenjp2-7-dev\" || echo \"⚠️ Skipped: libopenjp2-7-dev (not available)\"
          apt-get install -y -qq libharfbuzz-dev 2>/dev/null && echo \"✅ Installed: libharfbuzz-dev\" || echo \"⚠️ Skipped: libharfbuzz-dev (not available)\"
          apt-get install -y -qq liblcms2-dev 2>/dev/null && echo \"✅ Installed: liblcms2-dev\" || echo \"⚠️ Skipped: liblcms2-dev (not available)\"
          apt-get install -y -qq libssl-dev 2>/dev/null && echo \"✅ Installed: libssl-dev\" || echo \"⚠️ Skipped: libssl-dev (not available)\"
          apt-get install -y -qq zlib1g-dev 2>/dev/null && echo \"✅ Installed: zlib1g-dev\" || echo \"⚠️ Skipped: zlib1g-dev (not available)\"
          apt-get install -y -qq libffi-dev 2>/dev/null && echo \"✅ Installed: libffi-dev\" || echo \"⚠️ Skipped: libffi-dev (not available)\"
          apt-get install -y -qq build-essential 2>/dev/null && echo \"✅ Installed: build-essential\" || echo \"⚠️ Skipped: build-essential (not available)\"
          apt-get install -y -qq pkg-config 2>/dev/null && echo \"✅ Installed: pkg-config\" || echo \"⚠️ Skipped: pkg-config (not available)\"

          # Try to install MuPDF system library as alternative
          echo 'Attempting to install system MuPDF library...'
          apt-get install -y -qq mupdf-tools libmupdf-dev 2>/dev/null && echo \"✅ System MuPDF installed\" || echo \"⚠️ System MuPDF not available\"

          # Try alternative: install from Ubuntu 22.04 repository
          echo 'Attempting to install MuPDF from alternative sources...'
          wget -q http://archive.ubuntu.com/ubuntu/pool/universe/m/mupdf/libmupdf24_1.24.1+ds1-1_amd64.deb -O /tmp/libmupdf24.deb 2>/dev/null || echo 'Could not download libmupdf24'
          dpkg -i /tmp/libmupdf24.deb 2>/dev/null || echo 'Could not install libmupdf24'
          ldconfig 2>/dev/null || echo 'ldconfig failed'

          # Update status after system dependencies
          echo '| Package | Category | Description | Status | Version |' > package_status_report.txt
          echo '|---------|----------|-------------|--------|---------|' >> package_status_report.txt
          echo '| **System Dependencies** | System | Ubuntu packages for PyMuPDF | 🟢 Installed | N/A |' >> package_status_report.txt
          echo '| **Python Environment** | Runtime | Virtual environment setup | 🟢 Ready | N/A |' >> package_status_report.txt
          echo '| **Package Installation** | Dependencies | Python package installation | 🟡 Installing... | N/A |' >> package_status_report.txt
          "

      # 4.2. Install Python packages
      - name: 📦 Install Python packages
        run: |
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          cd /var/www/mivaa-pdf-extractor
          source .venv/bin/activate
          export LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH\"

          # --- Ensure pip and uv are installed ---
          python -m ensurepip --upgrade
          pip install --upgrade pip
          pip install uv

          # --- Exact version installation to prevent conflicts ---
          echo 'Installing exact versions to prevent dependency conflicts...'

          # Create pip install log file
          touch /tmp/pip-install.log

          # CRITICAL: Use --no-deps and exact versions to prevent pip from upgrading

          # Step 1: Core scientific computing with exact versions
          echo 'Step 1: Installing core scientific computing...'
          pip install --no-deps numpy==1.26.4
          pip install --no-deps pandas==2.1.4
          pip install --no-deps scipy==1.11.4

          # Step 2: PyTorch ecosystem with exact versions
          echo 'Step 2: Installing PyTorch ecosystem...'
          pip install --no-deps torch==2.2.2
          pip install --no-deps torchvision==0.17.2

          # Step 3: HTTP and API clients with exact versions
          echo 'Step 3: Installing HTTP and API clients...'
          pip install --no-deps httpx==0.27.0
          pip install --no-deps requests==2.31.0
          pip install --no-deps openai==1.51.0
          pip install --no-deps anthropic==0.23.1

          # Step 4: Computer vision with exact versions
          echo 'Step 4: Installing computer vision...'
          pip install --no-deps opencv-python-headless==4.8.0.76
          pip install --no-deps Pillow==10.2.0
          pip install --no-deps scikit-image==0.21.0
          pip install --no-deps imageio==2.31.6

          # Step 5: LlamaIndex with PROPERLY compatible versions (FINAL FIX)
          echo 'Step 5: Installing LlamaIndex ecosystem with VERIFIED compatible versions...'
          pip install --no-deps llama-index-core==0.10.57 || echo 'llama-index-core installation failed'
          echo \"Installing llama-index...\" >> /tmp/pip-install.log
          echo 'Attempting llama-index installation...'
          if pip install --no-deps llama-index==0.10.57 2>&1 | tee -a /tmp/pip-install.log; then
            echo '✅ llama-index installed successfully with --no-deps'
          elif pip install llama-index==0.10.57 2>&1 | tee -a /tmp/pip-install.log; then
            echo '✅ llama-index installed successfully with dependencies'
          elif pip install --force-reinstall llama-index==0.10.57 2>&1 | tee -a /tmp/pip-install.log; then
            echo '✅ llama-index installed successfully with force-reinstall'
          else
            echo '❌ llama-index installation failed completely' | tee -a /tmp/pip-install.log
            echo 'Checking if llama-index-core is available...'
            python -c 'import llama_index_core; print(\"llama-index-core available:\", llama_index_core.__version__)' || echo 'llama-index-core not available'
          fi
          pip install --no-deps llama-index-llms-openai==0.1.29
          pip install --no-deps llama-index-embeddings-openai==0.1.11
          pip install --no-deps llama-index-embeddings-clip==0.1.5
          pip install --no-deps llama-index-multi-modal-llms-openai==0.1.9
          pip install --no-deps llama-index-multi-modal-llms-anthropic==0.1.4
          pip install --no-deps llama-index-agent-openai==0.2.9
          pip install --no-deps llama-index-program-openai==0.1.6
          pip install --no-deps llama-index-question-gen-openai==0.1.3
          pip install --no-deps llama-index-vector-stores-supabase==0.1.4
          pip install --no-deps llama-index-readers-file==0.1.12
          pip install --no-deps llama-index-cli==0.1.13

          # Fix pypdf version conflict
          pip install --no-deps pypdf==4.3.1

          # Step 6: Web framework and remaining packages
          echo 'Step 6: Installing web framework and remaining packages...'
          pip install --no-deps fastapi==0.115.0
          pip install --no-deps starlette==0.40.0
          pip install --no-deps anyio==3.7.1
          pip install --no-deps uvicorn==0.24.0
          # Install pymupdf4llm directly - let it handle PyMuPDF dependencies
          echo \"Installing pymupdf4llm...\" >> /tmp/pip-install.log
          echo 'Installing pymupdf4llm - letting it handle PyMuPDF dependencies automatically...'

          # Install pymupdf4llm and let pip resolve PyMuPDF dependencies
          pip install pymupdf4llm==0.0.12 2>&1 | tee -a /tmp/pip-install.log

          # Test final installation
          echo 'Testing final pymupdf4llm installation...'
          python -c 'import pymupdf4llm; print(\"✅ pymupdf4llm working:\", pymupdf4llm.__version__ if hasattr(pymupdf4llm, \"__version__\") else \"version unknown\")'
          pip install --no-deps supabase==2.3.0
          pip install --no-deps postgrest==0.13.0
          pip install --no-deps gotrue==2.9.1
          pip install --no-deps storage3==0.7.7
          pip install --no-deps supafunc==0.3.3
          pip install --no-deps realtime==1.0.6

          # Step 7: Install missing dependencies that --no-deps skipped (FIXED VERSIONS)
          echo 'Step 7: Installing essential dependencies with compatible versions...'
          pip install pydantic==2.8.0
          pip install pydantic-settings==2.1.0
          pip install python-dotenv==1.0.1
          pip install python-multipart==0.0.6
          pip install python-dateutil==2.8.2
          pip install typing-extensions==4.11.0
          pip install PyJWT==2.10.1
          pip install cryptography==41.0.7
          pip install email-validator==2.1.0
          pip install aiofiles==23.2.1
          pip install bcrypt==4.1.2
          pip install psutil==5.9.6
          pip install tenacity==8.5.0
          pip install matplotlib==3.7.5
          pip install nltk==3.9.1
          pip install easyocr==1.7.0
          pip install pytesseract==0.3.10
          pip install scikit-learn==1.3.2
          pip install transformers==4.41.0
          pip install sentence-transformers==3.0.0
          pip install asyncio-mqtt==0.13.0
          pip install aiohttp==3.9.3

          echo 'All dependencies installed with exact versions - no conflicts!'
          "

      # 4.3. Verify package installations
      - name: ✅ Verify package installations
        run: |
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          cd /var/www/mivaa-pdf-extractor
          source .venv/bin/activate
          export LD_LIBRARY_PATH=\"/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH\"

          # --- Comprehensive Package Verification ---
          echo 'Verifying all critical packages from requirements.txt...'
          echo '================================================================'

          # Verify critical packages
          python -c 'import fastapi; print(\"FastAPI: OK\")'
          python -c 'import uvicorn; print(\"Uvicorn: OK\")'
          python -c 'import cv2; print(\"OpenCV: OK\")'
          # Test PyMuPDF with detailed error handling
          echo 'Testing PyMuPDF installation...'
          if python -c 'import sys; import fitz; print(\"PyMuPDF (fitz): OK - Version\", fitz.version[0]); print(\"PyMuPDF library path:\", fitz.__file__)' 2>/dev/null; then
            echo '✅ PyMuPDF working correctly'
          else
            echo '❌ PyMuPDF (fitz): FAILED'
            echo 'Detailed error:'
            python -c 'import fitz' 2>&1 | head -5 || echo 'Import completely failed'
            echo 'Checking alternative PDF libraries...'
            python -c 'import pdfplumber; print(\"pdfplumber: OK\")' 2>/dev/null || echo 'pdfplumber: Not available'
            python -c 'import pypdf; print(\"pypdf: OK\")' 2>/dev/null || echo 'pypdf: Not available'
          fi

          if python -c 'import pymupdf4llm; print(\"PyMuPDF4LLM: OK\"); print(\"PyMuPDF4LLM path:\", pymupdf4llm.__file__)' 2>/dev/null; then
            echo '✅ PyMuPDF4LLM working correctly'
          else
            echo '❌ PyMuPDF4LLM: FAILED'
            echo 'Detailed error:'
            python -c 'import pymupdf4llm' 2>&1 | head -5 || echo 'Import completely failed'
          fi
          python -c 'import llama_index; print(\"LlamaIndex: OK\")' || echo 'LlamaIndex: FAILED - Check installation'
          python -c 'import supabase; print(\"Supabase: OK\")'
          python -c 'import numpy; print(\"NumPy: OK\")'
          python -c 'import pandas; print(\"Pandas: OK\")'
          python -c 'import PIL; print(\"Pillow: OK\")'
          python -c 'import pydantic; print(\"Pydantic: OK\")'
          python -c 'import requests; print(\"Requests: OK\")'

          echo 'ALL CRITICAL PACKAGES VERIFIED!'

          # Debug: Check if problematic packages are actually installed
          echo 'Debugging package installations...'
          echo 'Checking pip list for problematic packages:'
          pip list | grep -i pymupdf || echo 'No PyMuPDF packages found'
          pip list | grep -i llama || echo 'No llama packages found'

          echo 'Testing direct imports:'
          python -c 'import pymupdf4llm; print(\"pymupdf4llm import: SUCCESS\")' 2>/dev/null || echo 'pymupdf4llm import: FAILED'
          python -c 'import llama_index; print(\"llama_index import: SUCCESS\")' 2>/dev/null || echo 'llama_index import: FAILED'

          # Debug: Check system libraries
          echo 'Checking system MuPDF libraries...'
          find /usr -name '*mupdf*' 2>/dev/null | head -10 || echo 'No MuPDF libraries found in /usr'
          ldconfig -p | grep mupdf || echo 'No MuPDF libraries in ldconfig cache'

          # Check what libmupdf files are available
          echo 'Checking for libmupdf.so files...'
          find /usr -name 'libmupdf.so*' 2>/dev/null || echo 'No libmupdf.so files found'
          ls -la /usr/lib/x86_64-linux-gnu/libmupdf* 2>/dev/null || echo 'No libmupdf in standard lib directory'

          # Check if we can create a symlink to fix the version issue
          if [ -f /usr/lib/x86_64-linux-gnu/libmupdf.so ]; then
            echo 'Found libmupdf.so, creating version-specific symlink...'
            ln -sf /usr/lib/x86_64-linux-gnu/libmupdf.so /usr/lib/x86_64-linux-gnu/libmupdf.so.24.1 2>/dev/null && echo 'Symlink created' || echo 'Symlink failed'
          fi

          # Generate actual package status for GitHub summary
          echo 'Generating package status report...'

          # Create simple package status check
          echo '| Package | Category | Description | Status | Version |' > package_status_report.txt
          echo '|---------|----------|-------------|--------|---------|' >> package_status_report.txt

          # Check each critical package individually
          python -c 'import fastapi; print(f\"| **fastapi** | Web Framework | FastAPI web framework | 🟢 Installed | {fastapi.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **fastapi** | Web Framework | FastAPI web framework | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import uvicorn; print(f\"| **uvicorn** | Server | ASGI server | 🟢 Installed | {uvicorn.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **uvicorn** | Server | ASGI server | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import cv2; print(f\"| **opencv-python-headless** | Computer Vision | Image processing | 🟢 Installed | {cv2.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **opencv-python-headless** | Computer Vision | Image processing | 🔴 Missing | N/A |' >> package_status_report.txt
          # Check pymupdf4llm with detailed error handling
          if python -c 'import pymupdf4llm; print(f\"| **pymupdf4llm** | PDF Processing | PDF processing for LLM | 🟢 Installed | {pymupdf4llm.__version__} |\")' >> package_status_report.txt 2>/dev/null; then
            echo 'pymupdf4llm status: OK'
          else
            echo '| **pymupdf4llm** | PDF Processing | PDF processing for LLM | 🔴 Missing | N/A |' >> package_status_report.txt
            echo 'pymupdf4llm status: FAILED'
            python -c 'import pymupdf4llm' 2>&1 | head -3 || echo 'Import test failed'
          fi
          python -c 'import supabase; print(f\"| **supabase** | Database | Database client | 🟢 Installed | {supabase.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **supabase** | Database | Database client | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import numpy; print(f\"| **numpy** | Computing | Numerical computing | 🟢 Installed | {numpy.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **numpy** | Computing | Numerical computing | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import pandas; print(f\"| **pandas** | Data | Data manipulation | 🟢 Installed | {pandas.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **pandas** | Data | Data manipulation | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import torch; print(f\"| **torch** | AI/ML | PyTorch deep learning | 🟢 Installed | {torch.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **torch** | AI/ML | PyTorch deep learning | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import openai; print(f\"| **openai** | AI/ML | OpenAI API client | 🟢 Installed | {openai.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **openai** | AI/ML | OpenAI API client | 🔴 Missing | N/A |' >> package_status_report.txt
          python -c 'import anthropic; print(f\"| **anthropic** | AI/ML | Anthropic API client | 🟢 Installed | {anthropic.__version__} |\")' >> package_status_report.txt 2>/dev/null || echo '| **anthropic** | AI/ML | Anthropic API client | 🔴 Missing | N/A |' >> package_status_report.txt
          # Check llama-index with detailed error handling
          if python -c 'import llama_index; print(f\"| **llama-index** | AI/ML | LLM framework | 🟢 Installed | {llama_index.__version__} |\")' >> package_status_report.txt 2>/dev/null; then
            echo 'llama-index status: OK'
          else
            echo '| **llama-index** | AI/ML | LLM framework | 🔴 Missing | N/A |' >> package_status_report.txt
            echo 'llama-index status: FAILED'
            python -c 'import llama_index' 2>&1 | head -3 || echo 'Import test failed'
          fi

          echo '' >> package_status_report.txt
          echo 'Package status report generated successfully'

          # Ensure package status report exists even if some packages failed
          if [ ! -f package_status_report.txt ]; then
            echo '| **Status** | Error | Package status report creation failed | 🔴 Failed | N/A |' > package_status_report.txt
          fi
          "

      # 4.5. Update Package Status in Summary
      - name: 📦 Final Package Installation Status
        if: always()  # Run even if previous steps failed
        run: |
          echo "📦 Generating final package installation status..."

          # Get the actual package status from the server
          PACKAGE_STATUS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          cd /var/www/mivaa-pdf-extractor
          if [ -f .venv/bin/activate ]; then
            source .venv/bin/activate
            if [ -f package_status_report.txt ]; then
              echo '| Package | Category | Description | Status | Version |'
              echo '|---------|----------|-------------|--------|---------|'
              cat package_status_report.txt | grep -v '^|.*Package.*|.*Category.*|' | grep -v '^|.*-.*|.*-.*|' || echo '| **No Data** | Error | Package status report is empty | 🔴 Failed | N/A |'
            else
              echo '| Package | Category | Description | Status | Version |'
              echo '|---------|----------|-------------|--------|---------|'
              echo '| **Status Report** | Error | Package status report not found | 🔴 Failed | N/A |'
            fi
          else
            echo '| Package | Category | Description | Status | Version |'
            echo '|---------|----------|-------------|--------|---------|'
            echo '| **Virtual Environment** | Error | Virtual environment not found | 🔴 Failed | N/A |'
          fi
          " 2>/dev/null || {
            echo '| Package | Category | Description | Status | Version |'
            echo '|---------|----------|-------------|--------|---------|'
            echo '| **Connection** | Error | Could not connect to server | 🔴 Failed | N/A |'
          })

          # Add the final package status to GitHub summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Final Package Installation Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "$PACKAGE_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "✅ Final package status added to deployment summary"

          # Add collapsible installation logs section
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          cd /var/www/mivaa-pdf-extractor
          echo '=== Package Installation Logs ===' > /tmp/installation_logs.txt
          echo 'Timestamp: \$(date)' >> /tmp/installation_logs.txt
          echo '' >> /tmp/installation_logs.txt
          if [ -f /tmp/pip-install.log ]; then
            echo 'Recent pip installation output (last 100 lines):' >> /tmp/installation_logs.txt
            tail -100 /tmp/pip-install.log >> /tmp/installation_logs.txt 2>&1 || echo 'Could not read pip install log' >> /tmp/installation_logs.txt
          else
            echo 'No pip install log found at /tmp/pip-install.log' >> /tmp/installation_logs.txt
          fi
          echo '' >> /tmp/installation_logs.txt
          echo '=== Virtual Environment Status ===' >> /tmp/installation_logs.txt
          if [ -f .venv/bin/activate ]; then
            source .venv/bin/activate
            echo 'Python version:' >> /tmp/installation_logs.txt
            python --version >> /tmp/installation_logs.txt 2>&1 || echo 'Python not working' >> /tmp/installation_logs.txt
            echo 'Pip version:' >> /tmp/installation_logs.txt
            pip --version >> /tmp/installation_logs.txt 2>&1 || echo 'Pip not working' >> /tmp/installation_logs.txt
            echo 'Installed packages (first 20):' >> /tmp/installation_logs.txt
            pip list | head -20 >> /tmp/installation_logs.txt 2>&1 || echo 'Could not list packages' >> /tmp/installation_logs.txt
          else
            echo 'Virtual environment not found at .venv/bin/activate' >> /tmp/installation_logs.txt
          fi
          " 2>/dev/null || echo "Could not create installation logs file"

          INSTALLATION_LOGS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 "cat /tmp/installation_logs.txt 2>/dev/null" || echo "Could not retrieve installation logs")

          # Check if installation logs are empty or just contain basic info
          if [ ${#INSTALLATION_LOGS} -lt 100 ] || [[ "$INSTALLATION_LOGS" == *"Could not retrieve"* ]]; then
            INSTALLATION_LOGS="✅ Everything is Good - No installation issues detected"
          fi



      # 4.5.1. Fallback Package Status (Always runs)
      - name: 📦 Fallback Package Status Check
        if: always()  # Always run this step
        run: |
          echo "📦 Running fallback package status check..."

          # Try to get basic status information
          BASIC_STATUS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          echo '=== Basic System Status ==='
          echo 'Server: Online ✅'
          echo 'SSH Connection: Working ✅'
          if [ -d '/var/www/mivaa-pdf-extractor' ]; then
            echo 'App Directory: Exists ✅'
            cd /var/www/mivaa-pdf-extractor
            if [ -d '.venv' ]; then
              echo 'Virtual Environment: Exists ✅'
              if [ -f '.venv/bin/activate' ]; then
                echo 'Virtual Environment: Functional ✅'
                source .venv/bin/activate
                python --version 2>/dev/null && echo 'Python: Working ✅' || echo 'Python: Failed ❌'
              else
                echo 'Virtual Environment: Broken ❌'
              fi
            else
              echo 'Virtual Environment: Missing ❌'
            fi
          else
            echo 'App Directory: Missing ❌'
          fi
          " 2>/dev/null || echo "SSH Connection: Failed ❌")

          echo "📊 Basic Status Information:"
          echo "$BASIC_STATUS"

          # Add to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Basic System Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$BASIC_STATUS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add comprehensive deployment logs section
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          echo '=== Comprehensive Deployment Logs ===' > /tmp/deployment_logs.txt
          echo 'Timestamp: \$(date)' >> /tmp/deployment_logs.txt
          echo '' >> /tmp/deployment_logs.txt
          echo '=== Service Status ===' >> /tmp/deployment_logs.txt
          systemctl status mivaa-pdf-extractor --no-pager --lines=10 >> /tmp/deployment_logs.txt 2>&1 || echo 'Service status not available' >> /tmp/deployment_logs.txt
          echo '' >> /tmp/deployment_logs.txt
          echo '=== Recent Service Logs (Last 30 lines) ===' >> /tmp/deployment_logs.txt
          journalctl -u mivaa-pdf-extractor --no-pager -n 30 --since='30 minutes ago' >> /tmp/deployment_logs.txt 2>&1 || echo 'Service logs not available' >> /tmp/deployment_logs.txt
          echo '' >> /tmp/deployment_logs.txt
          echo '=== System Resource Usage ===' >> /tmp/deployment_logs.txt
          echo 'Memory:' >> /tmp/deployment_logs.txt
          free -h | grep Mem >> /tmp/deployment_logs.txt 2>&1 || echo 'Memory info not available' >> /tmp/deployment_logs.txt
          echo 'Disk:' >> /tmp/deployment_logs.txt
          df -h /var/www/mivaa-pdf-extractor | tail -1 >> /tmp/deployment_logs.txt 2>&1 || echo 'Disk info not available' >> /tmp/deployment_logs.txt
          echo 'Load:' >> /tmp/deployment_logs.txt
          cat /proc/loadavg >> /tmp/deployment_logs.txt 2>&1 || echo 'Load info not available' >> /tmp/deployment_logs.txt
          echo '' >> /tmp/deployment_logs.txt
          echo '=== Network Status ===' >> /tmp/deployment_logs.txt
          echo 'Port 8000:' >> /tmp/deployment_logs.txt
          ss -tlnp | grep :8000 >> /tmp/deployment_logs.txt 2>&1 || echo 'Port 8000 not listening' >> /tmp/deployment_logs.txt
          echo 'Process on 8000:' >> /tmp/deployment_logs.txt
          lsof -i :8000 >> /tmp/deployment_logs.txt 2>&1 || echo 'No process on port 8000' >> /tmp/deployment_logs.txt
          echo '' >> /tmp/deployment_logs.txt
          echo '=== Application Files ===' >> /tmp/deployment_logs.txt
          if [ -d /var/www/mivaa-pdf-extractor ]; then
            echo 'App directory exists: YES' >> /tmp/deployment_logs.txt
            echo 'Recent files:' >> /tmp/deployment_logs.txt
            ls -la /var/www/mivaa-pdf-extractor/ | head -10 >> /tmp/deployment_logs.txt 2>&1 || echo 'Could not list files' >> /tmp/deployment_logs.txt
            if [ -f /var/www/mivaa-pdf-extractor/.venv/bin/activate ]; then
              echo 'Virtual environment: EXISTS' >> /tmp/deployment_logs.txt
              cd /var/www/mivaa-pdf-extractor
              source .venv/bin/activate
              echo 'Python version:' >> /tmp/deployment_logs.txt
              python --version >> /tmp/deployment_logs.txt 2>&1 || echo 'Python not working' >> /tmp/deployment_logs.txt
              echo 'FastAPI version:' >> /tmp/deployment_logs.txt
              python -c 'import fastapi; print(fastapi.__version__)' >> /tmp/deployment_logs.txt 2>&1 || echo 'FastAPI not installed' >> /tmp/deployment_logs.txt
            else
              echo 'Virtual environment: MISSING' >> /tmp/deployment_logs.txt
            fi
          else
            echo 'App directory exists: NO' >> /tmp/deployment_logs.txt
          fi
          " 2>/dev/null || echo "Could not create deployment logs file"

          DEPLOYMENT_LOGS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 "cat /tmp/deployment_logs.txt 2>/dev/null" || echo "Could not retrieve deployment logs")

          # Check if deployment logs are empty or just contain basic info
          if [ ${#DEPLOYMENT_LOGS} -lt 100 ] || [[ "$DEPLOYMENT_LOGS" == *"Could not retrieve"* ]]; then
            DEPLOYMENT_LOGS="✅ Everything is Good - No deployment issues detected"
          fi



      # 4.6. Create/Update systemd service file
      - name: 🔧 Create/Update systemd service file
        run: |
          echo "🔧 Creating/updating systemd service file..."
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 'sudo tee /etc/systemd/system/mivaa-pdf-extractor.service > /dev/null' << 'SERVICE_EOF'
          [Unit]
          Description=Mivaa PDF Extractor FastAPI service
          After=network.target

          [Service]
          Type=simple
          User=root
          WorkingDirectory=/var/www/mivaa-pdf-extractor
          Environment=PATH=/root/.pyenv/shims:/root/.pyenv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          Environment=PYTHONPATH=/var/www/mivaa-pdf-extractor
          Environment=JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          Environment=SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          Environment=SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          Environment=MATERIAL_KAI_API_KEY=${{ secrets.MATERIAL_KAI_API_KEY }}
          Environment=TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}
          Environment=ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          Environment=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ExecStart=/var/www/mivaa-pdf-extractor/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000
          Restart=always
          RestartSec=3
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF

      # 4.6. Restart service
      - name: 🔄 Restart service
        run: |
          echo "🔄 Reloading systemd and restarting service..."
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          # Reload systemd and enable service
          sudo systemctl daemon-reload
          sudo systemctl enable mivaa-pdf-extractor

          # Restart the FastAPI service
          sudo systemctl restart mivaa-pdf-extractor

          # Check service status
          sudo systemctl status mivaa-pdf-extractor --no-pager
          "

      # 6. Health Check & Diagnostics
      - name: 🏥 Health Check & Diagnostics
        run: |
          echo "🏥 Performing comprehensive health checks..."
          echo "=========================================="

          # Wait a moment for service to fully start
          sleep 10

          # Health check with detailed response
          echo "🔍 Checking health endpoint..."
          HEALTH_URL="https://v1api.materialshub.gr/health"

          # Perform health check and capture response
          HTTP_STATUS=$(curl -s -o /tmp/health_response.json -w "%{http_code}" "$HEALTH_URL" || echo "000")

          echo "📊 Health Check Results:"
          echo "  • URL: $HEALTH_URL"
          echo "  • HTTP Status: $HTTP_STATUS"

          # Capture service logs and system information for debugging
          echo "📋 Capturing service logs and system information..."

          # Create a temporary file to store logs
          ssh -o StrictHostKeyChecking=no root@104.248.68.3 "
          echo '=== MIVAA PDF Extractor Service Logs ===' > /tmp/service_logs.txt
          echo 'Timestamp: \$(date)' >> /tmp/service_logs.txt
          echo '' >> /tmp/service_logs.txt
          echo '=== Service Status ===' >> /tmp/service_logs.txt
          systemctl status mivaa-pdf-extractor --no-pager --lines=20 >> /tmp/service_logs.txt 2>&1 || echo 'Service status not available' >> /tmp/service_logs.txt
          echo '' >> /tmp/service_logs.txt
          echo '=== Last 100 Service Log Entries ===' >> /tmp/service_logs.txt
          journalctl -u mivaa-pdf-extractor --no-pager -n 100 --since='1 hour ago' >> /tmp/service_logs.txt 2>&1 || echo 'Service logs not available' >> /tmp/service_logs.txt
          echo '' >> /tmp/service_logs.txt
          echo '=== Recent System Errors ===' >> /tmp/service_logs.txt
          journalctl --no-pager -p err -n 10 --since='1 hour ago' >> /tmp/service_logs.txt 2>&1 || echo 'System error logs not available' >> /tmp/service_logs.txt
          echo '' >> /tmp/service_logs.txt
          echo '=== System Resources ===' >> /tmp/service_logs.txt
          echo 'Disk Space:' >> /tmp/service_logs.txt
          df -h /var/www/mivaa-pdf-extractor >> /tmp/service_logs.txt 2>&1 || echo 'Disk space info not available' >> /tmp/service_logs.txt
          echo 'Memory Usage:' >> /tmp/service_logs.txt
          free -h >> /tmp/service_logs.txt 2>&1 || echo 'Memory info not available' >> /tmp/service_logs.txt
          echo '' >> /tmp/service_logs.txt
          echo '=== Network Status ===' >> /tmp/service_logs.txt
          echo 'Port 8000 Status:' >> /tmp/service_logs.txt
          ss -tlnp | grep :8000 >> /tmp/service_logs.txt 2>&1 || echo 'Port 8000 not listening' >> /tmp/service_logs.txt
          echo 'Process on Port 8000:' >> /tmp/service_logs.txt
          lsof -i :8000 >> /tmp/service_logs.txt 2>&1 || echo 'No process on port 8000' >> /tmp/service_logs.txt
          " 2>/dev/null || echo "Could not create service logs file"

          # Retrieve the logs
          SERVICE_LOGS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 "cat /tmp/service_logs.txt 2>/dev/null" || echo "Could not retrieve service logs")

          # Debug: Show log length
          echo "📊 Service logs captured: ${#SERVICE_LOGS} characters"
          if [ ${#SERVICE_LOGS} -lt 50 ]; then
            echo "⚠️ Warning: Service logs seem too short, might be empty"
            echo "Raw logs content: '$SERVICE_LOGS'"
          fi

          # Initialize log variables with fallback values if not set
          if [ -z "$INSTALLATION_LOGS" ]; then
            INSTALLATION_LOGS="✅ Everything is Good - No installation issues detected"
          fi

          if [ -z "$DEPLOYMENT_LOGS" ]; then
            DEPLOYMENT_LOGS="✅ Everything is Good - No deployment issues detected"
          fi

          if [ -z "$DIAGNOSTIC_LOGS" ]; then
            DIAGNOSTIC_LOGS="✅ Everything is Good - No diagnostic issues detected"
          fi

          # Add Errors & Logs section with separate accordions
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Errors & Logs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Service Status & Logs Accordion
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>🚨 Service Status & Logs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$SERVICE_LOGS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Installation Logs Accordion
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>📦 Installation Logs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$INSTALLATION_LOGS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Comprehensive Deployment Logs Accordion
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>📋 Comprehensive Deployment Logs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$DEPLOYMENT_LOGS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Diagnostic Logs Accordion
          echo "<details>" >> $GITHUB_STEP_SUMMARY
          echo "<summary>🔧 Diagnostic Logs</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$DIAGNOSTIC_LOGS" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Debugging Information (always visible)
          echo "### 🐛 Debugging Information" >> $GITHUB_STEP_SUMMARY
          echo "Service Name: mivaa-pdf-extractor" >> $GITHUB_STEP_SUMMARY
          echo "Log Command: \`sudo journalctl -u mivaa-pdf-extractor -f\`" >> $GITHUB_STEP_SUMMARY
          echo "Service Status: \`sudo systemctl status mivaa-pdf-extractor\`" >> $GITHUB_STEP_SUMMARY
          echo "Service Restart: \`sudo systemctl restart mivaa-pdf-extractor\`" >> $GITHUB_STEP_SUMMARY
          echo "Log Location: \`/var/log/mivaa-pdf-extractor/\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Package status is already updated in the main status section above



          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏥 Health Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Health check PASSED - Service is healthy!"
            echo "📄 Response:"
            cat /tmp/health_response.json 2>/dev/null || echo "  (No response body)"

            # Add success to summary
            echo "| **🏥 Health Endpoint** | ✅ HEALTHY | HTTP 200 - Service responding correctly |" >> $GITHUB_STEP_SUMMARY
            echo "| **📊 Response Time** | ✅ GOOD | < 5 seconds |" >> $GITHUB_STEP_SUMMARY

            # Test additional endpoints
            echo ""
            echo "🔍 Testing additional endpoints..."

            # Test API docs
            DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/docs" || echo "000")
            echo "  • API Docs (/docs): $DOCS_STATUS"

            # Test OpenAPI schema
            OPENAPI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/openapi.json" || echo "000")
            echo "  • OpenAPI Schema (/openapi.json): $OPENAPI_STATUS"

            # Add endpoint tests to summary
            if [ "$DOCS_STATUS" = "200" ]; then
              echo "| **📚 API Documentation** | ✅ AVAILABLE | HTTP 200 |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **📚 API Documentation** | ⚠️ ISSUE | HTTP $DOCS_STATUS |" >> $GITHUB_STEP_SUMMARY
            fi

            if [ "$OPENAPI_STATUS" = "200" ]; then
              echo "| **📋 OpenAPI Schema** | ✅ AVAILABLE | HTTP 200 |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **📋 OpenAPI Schema** | ⚠️ ISSUE | HTTP $OPENAPI_STATUS |" >> $GITHUB_STEP_SUMMARY
            fi

          else
            echo "❌ Health check FAILED - Service has issues!"
            echo "🚨 HTTP Status: $HTTP_STATUS"
            echo "📄 Response (if any):"
            cat /tmp/health_response.json 2>/dev/null || echo "  (No response received)"

            # Add failure to summary
            echo "| **🏥 Health Endpoint** | ❌ UNHEALTHY | HTTP $HTTP_STATUS - Service not responding correctly |" >> $GITHUB_STEP_SUMMARY
            echo "| **🚨 Issue Detected** | ⚠️ CRITICAL | Automatic diagnostics initiated |" >> $GITHUB_STEP_SUMMARY

            echo ""
            echo "🔧 Initiating automatic diagnostics..."
            echo "====================================="

            # SSH into server and gather diagnostics
            DIAGNOSTIC_LOGS=$(ssh -o StrictHostKeyChecking=no root@104.248.68.3 '
            echo "🔍 AUTOMATIC DIAGNOSTICS - Service Health Check Failed"
            echo "======================================================"
            echo ""

            echo "📊 System Status:"
            echo "  • Date: $(date)"
            echo "  • Uptime: $(uptime)"
            echo "  • Load: $(cat /proc/loadavg)"
            echo "  • Memory: $(free -h | grep Mem)"
            echo "  • Disk: $(df -h / | tail -1)"
            echo ""

            echo "🔧 Service Status:"
            sudo systemctl status mivaa-pdf-extractor --no-pager --lines=10
            echo ""

            echo "📋 Service Configuration:"
            echo "  • Service file: /etc/systemd/system/mivaa-pdf-extractor.service"
            if [ -f "/etc/systemd/system/mivaa-pdf-extractor.service" ]; then
              echo "  • Service file exists: ✅"
              echo "  • Working Directory: $(grep WorkingDirectory /etc/systemd/system/mivaa-pdf-extractor.service || echo '\''Not set'\'')"
              echo "  • ExecStart: $(grep ExecStart /etc/systemd/system/mivaa-pdf-extractor.service || echo '\''Not set'\'')"
              echo "  • Environment: $(grep Environment /etc/systemd/system/mivaa-pdf-extractor.service || echo '\''Not set'\'')"
            else
              echo "  • Service file exists: ❌"
            fi
            echo ""

            echo "📋 Recent Service Logs (Last 100 lines):"
            echo "========================================"
            sudo journalctl -u mivaa-pdf-extractor --no-pager --lines=100 --since "10 minutes ago"
            echo ""

            echo "🌐 Network & Port Status:"
            echo "  • Port 8000 listening: $(ss -tlnp | grep :8000 || echo '\''NOT LISTENING'\'')"
            echo "  • Process on port 8000: $(lsof -i :8000 || echo '\''NO PROCESS'\'')"
            echo ""

            echo "📁 Application Directory:"
            echo "  • Directory exists: $([ -d /var/www/mivaa-pdf-extractor ] && echo '\''YES'\'' || echo '\''NO'\'')"
            echo "  • Recent files: $(ls -la /var/www/mivaa-pdf-extractor/ | head -10)"
            echo ""

            echo "🐍 Python Environment:"
            cd /var/www/mivaa-pdf-extractor 2>/dev/null || echo "Cannot access app directory"
            if [ -f ".venv/bin/activate" ]; then
              source .venv/bin/activate
              echo "  • Python version: $(python --version)"
              echo "  • FastAPI installed: $(python -c '\''import fastapi; print(fastapi.__version__)'\'' 2>/dev/null || echo '\''NOT FOUND'\'')"
              echo "  • Virtual env active: $VIRTUAL_ENV"
            else
              echo "  • Virtual environment: NOT FOUND"
            fi
            echo ""

            echo "🔄 Attempting Service Restart:"
            echo "=============================="
            sudo systemctl restart mivaa-pdf-extractor
            sleep 5
            echo "  • Restart completed"
            echo "  • New status: $(sudo systemctl is-active mivaa-pdf-extractor)"
            echo ""

            echo "📋 Post-Restart Logs:"
            echo "====================================="
            sudo journalctl -u mivaa-pdf-extractor --no-pager --lines=20 --since "1 minute ago"
            ' 2>/dev/null || echo "Could not retrieve diagnostic information")

            # Check if diagnostic logs are empty or just contain basic info
            if [ ${#DIAGNOSTIC_LOGS} -lt 100 ] || [[ "$DIAGNOSTIC_LOGS" == *"Could not retrieve"* ]]; then
              DIAGNOSTIC_LOGS="✅ Everything is Good - No diagnostic issues detected"
            fi



            echo ""
            echo "🔄 Re-testing health endpoint after diagnostics..."
            sleep 10

            # Re-test health endpoint
            RETEST_STATUS=$(curl -s -o /tmp/health_retest.json -w "%{http_code}" "https://v1api.materialshub.gr/health" || echo "000")
            echo "🔍 Re-test Results:"
            echo "  • HTTP Status: $RETEST_STATUS"

            if [ "$RETEST_STATUS" = "200" ]; then
              echo "✅ Service recovered after restart!"
              echo "| **🔄 Recovery Status** | ✅ RECOVERED | Service healthy after automatic restart |" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Service still unhealthy after restart"
              echo "🚨 Manual intervention may be required"
              echo "| **🔄 Recovery Status** | ❌ FAILED | Manual intervention required |" >> $GITHUB_STEP_SUMMARY
              echo "| **📞 Next Steps** | 🔧 MANUAL | Check logs above and contact system administrator |" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Health Check Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Endpoint**: \`$HEALTH_URL\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Response Code**: \`$HTTP_STATUS\`" >> $GITHUB_STEP_SUMMARY
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "- **⚠️ Diagnostics**: Automatic diagnostics executed (see logs above)" >> $GITHUB_STEP_SUMMARY
            echo "- **🔄 Recovery**: Automatic restart attempted" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get FINAL current status of all endpoints for accurate Service Endpoints table
          echo "🔍 Getting final current status of all endpoints for Service Endpoints table..."
          FINAL_HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/health" --connect-timeout 10 --max-time 30 || echo "000")
          FINAL_DOCS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/docs" --connect-timeout 10 --max-time 30 || echo "000")
          FINAL_REDOC_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/redoc" --connect-timeout 10 --max-time 30 || echo "000")
          FINAL_OPENAPI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://v1api.materialshub.gr/openapi.json" --connect-timeout 10 --max-time 30 || echo "000")

          echo "📊 Final Status Summary:"
          echo "  • Health: $FINAL_HEALTH_STATUS"
          echo "  • Docs: $FINAL_DOCS_STATUS"
          echo "  • ReDoc: $FINAL_REDOC_STATUS"
          echo "  • OpenAPI: $FINAL_OPENAPI_STATUS"

          # Add Service Endpoints table with FINAL current status
          echo "## 🌐 Service Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----|--------|" >> $GITHUB_STEP_SUMMARY

          # Health endpoint status
          if [ "$FINAL_HEALTH_STATUS" = "200" ]; then
            echo "| **🏥 Health Check** | [https://v1api.materialshub.gr/health](https://v1api.materialshub.gr/health) | 🟢 Available (HTTP 200) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **🏥 Health Check** | [https://v1api.materialshub.gr/health](https://v1api.materialshub.gr/health) | 🔴 Unavailable (HTTP $FINAL_HEALTH_STATUS) |" >> $GITHUB_STEP_SUMMARY
          fi

          # API docs status
          if [ "$FINAL_DOCS_STATUS" = "200" ]; then
            echo "| **📚 API Documentation** | [https://v1api.materialshub.gr/docs](https://v1api.materialshub.gr/docs) | 🟢 Available (HTTP 200) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **📚 API Documentation** | [https://v1api.materialshub.gr/docs](https://v1api.materialshub.gr/docs) | 🔴 Unavailable (HTTP $FINAL_DOCS_STATUS) |" >> $GITHUB_STEP_SUMMARY
          fi

          # OpenAPI schema status
          if [ "$FINAL_OPENAPI_STATUS" = "200" ]; then
            echo "| **📋 OpenAPI Schema** | [https://v1api.materialshub.gr/openapi.json](https://v1api.materialshub.gr/openapi.json) | 🟢 Available (HTTP 200) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **📋 OpenAPI Schema** | [https://v1api.materialshub.gr/openapi.json](https://v1api.materialshub.gr/openapi.json) | 🔴 Unavailable (HTTP $FINAL_OPENAPI_STATUS) |" >> $GITHUB_STEP_SUMMARY
          fi

          # ReDoc endpoint status
          if [ "$FINAL_REDOC_STATUS" = "200" ]; then
            echo "| **📖 ReDoc** | [https://v1api.materialshub.gr/redoc](https://v1api.materialshub.gr/redoc) | 🟢 Available (HTTP 200) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **📖 ReDoc** | [https://v1api.materialshub.gr/redoc](https://v1api.materialshub.gr/redoc) | 🔴 Unavailable (HTTP $FINAL_REDOC_STATUS) |" >> $GITHUB_STEP_SUMMARY
          fi

          # API endpoints depend on health status
          if [ "$FINAL_HEALTH_STATUS" = "200" ]; then
            echo "| **📄 PDF Processing** | [https://v1api.materialshub.gr/api/v1/pdf/](https://v1api.materialshub.gr/api/v1/pdf/) | 🟢 Available (Depends on Health) |" >> $GITHUB_STEP_SUMMARY
            echo "| **🤖 AI Analysis** | [https://v1api.materialshub.gr/api/v1/ai/](https://v1api.materialshub.gr/api/v1/ai/) | 🟢 Available (Depends on Health) |" >> $GITHUB_STEP_SUMMARY
            echo "| **🔍 Vector Search** | [https://v1api.materialshub.gr/api/v1/search/](https://v1api.materialshub.gr/api/v1/search/) | 🟢 Available (Depends on Health) |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **📄 PDF Processing** | [https://v1api.materialshub.gr/api/v1/pdf/](https://v1api.materialshub.gr/api/v1/pdf/) | 🔴 Unavailable (Service Down) |" >> $GITHUB_STEP_SUMMARY
            echo "| **🤖 AI Analysis** | [https://v1api.materialshub.gr/api/v1/ai/](https://v1api.materialshub.gr/api/v1/ai/) | 🔴 Unavailable (Service Down) |" >> $GITHUB_STEP_SUMMARY
            echo "| **🔍 Vector Search** | [https://v1api.materialshub.gr/api/v1/search/](https://v1api.materialshub.gr/api/v1/search/) | 🔴 Unavailable (Service Down) |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      # 7. Post-Deployment Summary
      - name: 📊 Final Deployment Summary
        run: |
          echo ""
          echo "🎉 MIVAA PDF Extractor Deployment Complete!"
          echo "=========================================="
          echo ""
          echo "✅ Deployment Status: SUCCESS"
          echo "📅 Completed: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "⏱️ Duration: Approximately 2-3 minutes"

          # Add deployment results to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **✅ Status** | SUCCESS |" >> $GITHUB_STEP_SUMMARY
          echo "| **📅 Completed** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| **⏱️ Duration** | ~2-3 minutes |" >> $GITHUB_STEP_SUMMARY
          echo "| **🔄 Service Status** | Active and running |" >> $GITHUB_STEP_SUMMARY
          echo "| **⚙️ Process Manager** | systemd |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "🌐 Service Information:"
          echo "  • Server: 104.248.68.3"
          echo "  • Service: mivaa-pdf-extractor.service"
          echo "  • Status: Active and running"
          echo "  • Process Manager: systemd"
          echo ""
          echo "🔗 API Endpoints Available:"
          echo "  • Health Check: https://v1api.materialshub.gr/health"
          echo "  • API Documentation: https://v1api.materialshub.gr/docs"
          echo "  • OpenAPI Schema: https://v1api.materialshub.gr/openapi.json"
          echo "  • PDF Processing: https://v1api.materialshub.gr/api/v1/pdf/*"
          echo "  • AI Analysis: https://v1api.materialshub.gr/api/v1/ai/*"
          echo "  • Vector Search: https://v1api.materialshub.gr/api/v1/search/*"


          echo "" >> $GITHUB_STEP_SUMMARY
          echo ""
          echo "🧪 Quick Health Check Commands:"
          echo "  curl https://v1api.materialshub.gr/health"
          echo "  curl https://v1api.materialshub.gr/docs"
          echo ""
          echo "📋 Deployment Verification:"
          echo "  • ✅ Code updated to latest commit"
          echo "  • ✅ Python environment refreshed"
          echo "  • ✅ Dependencies synchronized with uv"
          echo "  • ✅ Critical imports verified (FastAPI, PyMuPDF, pymupdf4llm)"
          echo "  • ✅ Service restarted successfully"
          echo "  • ✅ systemd reports service as active"
          echo ""
          echo "🔧 Troubleshooting (if needed):"
          echo "  • SSH: ssh root@104.248.68.3"
          echo "  • Logs: sudo journalctl -u mivaa-pdf-extractor -f"
          echo "  • Status: sudo systemctl status mivaa-pdf-extractor"
          echo "  • Restart: sudo systemctl restart mivaa-pdf-extractor"
          echo "  • App Directory: cd /var/www/mivaa-pdf-extractor"
          echo ""
          echo "📈 Next Steps:"
          echo "  1. Verify API endpoints are responding"
          echo "  2. Test PDF processing functionality"
          echo "  3. Monitor application logs for any issues"
          echo "  4. Update any dependent services if needed"
          echo ""
          echo "🎯 Deployment completed successfully! 🚀"

          # Add quick actions to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Quick Actions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 [**Access Application**](https://v1api.materialshub.gr)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏥 [**Check Health**](https://v1api.materialshub.gr/health)" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 [**View API Docs**](https://v1api.materialshub.gr/docs)" >> $GITHUB_STEP_SUMMARY
          echo "- 📖 [**View ReDoc**](https://v1api.materialshub.gr/redoc)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 [**View Commit**](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY



          # Add troubleshooting section
          echo "## 🔧 Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Health Check" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "curl https://v1api.materialshub.gr/health" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### SSH Access" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "ssh root@104.248.68.3" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Service Management" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "sudo systemctl status mivaa-pdf-extractor" >> $GITHUB_STEP_SUMMARY
          echo "sudo systemctl restart mivaa-pdf-extractor" >> $GITHUB_STEP_SUMMARY
          echo "sudo journalctl -u mivaa-pdf-extractor -f" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

      # Final Deployment Status Update
      - name: 📊 Final Deployment Status
        if: always()
        run: |
          echo "📊 Updating final deployment status..."

          # Update the deployment progress table
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Final Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Initialization** | ✅ Complete | Deployment started successfully |" >> $GITHUB_STEP_SUMMARY
          echo "| **System Setup** | ✅ Complete | System dependencies installed |" >> $GITHUB_STEP_SUMMARY
          echo "| **Python Packages** | ✅ Complete | Python packages installed |" >> $GITHUB_STEP_SUMMARY
          echo "| **Service Restart** | ✅ Complete | Application service restarted |" >> $GITHUB_STEP_SUMMARY
          echo "| **Health Check** | ✅ Complete | Deployment health verified |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Add footer
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **MIVAA Default Deployment Pipeline** | 🕐 Generated: $(date) | 📋 ID: \`${{ github.run_id }}\`" >> $GITHUB_STEP_SUMMARY
