name: Update OpenAPI Schema

on:
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'requirements.txt'
      - 'pyproject.toml'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'requirements.txt'
      - 'pyproject.toml'
  workflow_dispatch:

jobs:
  update-openapi:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Ensure Comprehensive API is Running
      run: |
        # Check if legacy main.py exists and disable it
        if [ -f "main.py" ] && ! grep -q "LEGACY FILE - DEPRECATED" main.py; then
          echo "‚ö†Ô∏è  Disabling legacy main.py..."
          cp main.py main.py.legacy.backup
          cat > main.py << 'EOF'
        # LEGACY FILE - DEPRECATED
        # This file has been replaced by app/main.py
        #
        # The new comprehensive API is located in app/main.py with 37+ endpoints
        # This file is kept for reference only and should not be used
        #
        # To run the new API:
        # uvicorn app.main:app --host 0.0.0.0 --port 8000

        """
        # Original legacy code moved to main.py.legacy.backup
        # Use app/main.py for the comprehensive API instead
        """

        # END OF LEGACY FILE
        EOF
          echo "‚úÖ Legacy main.py disabled"
        fi

        # Start the comprehensive API
        echo "üöÄ Starting comprehensive API..."
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &

        # Wait for service to be ready and verify it's comprehensive
        echo "‚è≥ Waiting for comprehensive API to start..."
        max_attempts=30
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          if curl -s http://localhost:8000/health > /dev/null 2>&1; then
            # Check if it's the comprehensive API
            endpoint_count=$(curl -s http://localhost:8000/ 2>/dev/null | python3 -c "
        import json, sys
        try:
            data = json.load(sys.stdin)
            print(data.get('api_info', {}).get('total_endpoints', 0))
        except:
            print(0)
        " 2>/dev/null || echo "0")

            if [ "$endpoint_count" -gt 10 ]; then
              echo "‚úÖ Comprehensive API is running with $endpoint_count endpoints"
              break
            else
              echo "‚ö†Ô∏è  Only $endpoint_count endpoints detected, restarting..."
              pkill -f uvicorn || true
              sleep 2
              uvicorn app.main:app --host 0.0.0.0 --port 8000 &
            fi
          fi

          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Service failed to start after $max_attempts attempts"
            exit 1
          fi

          echo "‚è≥ Waiting for service... (attempt $attempt/$max_attempts)"
          sleep 5
          ((attempt++))
        done

    - name: Generate OpenAPI Schema
      run: |
        # Create docs directory
        mkdir -p docs/openapi

        # Generate OpenAPI schema using the script
        python scripts/generate_openapi.py
        
    - name: Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are changes
        if [[ -n $(git status --porcelain docs/openapi/) ]]; then
          git add docs/openapi/
          git commit -m "ü§ñ Auto-update OpenAPI schema [skip ci]"
          git push
          echo "‚úÖ OpenAPI schema updated and committed"
        else
          echo "‚ÑπÔ∏è No changes to OpenAPI schema"
        fi
        
    - name: Upload OpenAPI artifacts
      uses: actions/upload-artifact@v3
      with:
        name: openapi-schema
        path: docs/openapi/
        retention-days: 30
        
    - name: Comment on PR (if PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read the generated OpenAPI schema
          let schemaInfo = '';
          try {
            const schema = JSON.parse(fs.readFileSync('docs/openapi/openapi.json', 'utf8'));
            const pathsCount = Object.keys(schema.paths || {}).length;
            const tagsCount = (schema.tags || []).length;
            const version = schema.info?.version || 'unknown';
            
            schemaInfo = `
## üìÑ OpenAPI Schema Updated
            
**API Information:**
- **Version**: ${version}
- **Total Endpoints**: ${pathsCount}
- **API Categories**: ${tagsCount}
            
**Generated Files:**
- \`docs/openapi/openapi.json\` - OpenAPI JSON schema
- \`docs/openapi/openapi.js\` - JavaScript module
- \`docs/openapi/openapi.ts\` - TypeScript module
            
**Access Documentation:**
- **Swagger UI**: \`/docs\` endpoint when service is running
- **ReDoc**: \`/redoc\` endpoint when service is running
- **Raw Schema**: \`/openapi.json\` endpoint when service is running
            `;
          } catch (error) {
            schemaInfo = `## üìÑ OpenAPI Schema Generation

‚ö†Ô∏è Could not read schema details: ${error.message}

Generated files are available in the artifacts.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: schemaInfo
          });
          
  deploy-notification:
    needs: update-openapi
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment
      run: |
        echo "üöÄ OpenAPI schema has been updated and is ready for deployment"
        echo "üìç Next steps:"
        echo "   1. Deploy the MIVAA service"
        echo "   2. Run 'mivaa-openapi' command on the server to regenerate schema"
        echo "   3. Update any external documentation that uses the static schema files"
