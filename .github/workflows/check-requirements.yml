name: Check Requirements Lock File

on:
  pull_request:
    paths:
      - 'requirements.in'
      - 'requirements.txt'
  push:
    branches: [ "main" ]
    paths:
      - 'requirements.in'

jobs:
  check-requirements:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools

      - name: Check if requirements.txt is up to date
        run: |
          echo "🔍 Checking if requirements.txt is up to date..."
          
          # Generate new requirements.txt
          pip-compile requirements.in --output-file requirements-new.txt --resolver=backtracking --quiet
          
          # Compare with existing requirements.txt
          if ! diff -u requirements.txt requirements-new.txt; then
            echo ""
            echo "❌ requirements.txt is out of date!"
            echo ""
            echo "🔧 To fix this, run:"
            echo "   bash scripts/update-requirements.sh"
            echo ""
            echo "📋 Or manually run:"
            echo "   pip-compile requirements.in --output-file requirements.txt --resolver=backtracking"
            echo ""
            exit 1
          else
            echo "✅ requirements.txt is up to date!"
          fi

      - name: Validate requirements can be installed
        run: |
          echo "🧪 Testing requirements installation..."
          python -m venv test_env
          source test_env/bin/activate
          
          # Test installation
          pip install -r requirements.txt
          
          # Basic import test
          python -c "
          try:
              import fastapi
              import uvicorn
              import llama_index
              import supabase
              print('✅ Core imports successful')
          except ImportError as e:
              print(f'❌ Import failed: {e}')
              exit(1)
          "
          
          deactivate
          rm -rf test_env
          echo "✅ Requirements validation passed!"

      - name: Generate requirements summary
        if: always()
        run: |
          echo "## 📦 Requirements Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "requirements.txt" ]; then
            PACKAGE_COUNT=$(grep -c "^[a-zA-Z]" requirements.txt || echo "0")
            echo "- **Total Packages**: $PACKAGE_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Lock File**: ✅ Present" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔑 Key Dependencies" >> $GITHUB_STEP_SUMMARY
            echo "| Package | Version |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|" >> $GITHUB_STEP_SUMMARY
            
            # Extract key packages
            for pkg in fastapi uvicorn llama-index supabase pydantic; do
              if grep -q "^${pkg}==" requirements.txt; then
                version=$(grep "^${pkg}==" requirements.txt | cut -d'=' -f3)
                echo "| $pkg | $version |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "- **Lock File**: ❌ Missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Performance Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-resolved Dependencies**: No server-side resolution" >> $GITHUB_STEP_SUMMARY
          echo "- **Faster Deployments**: Skip dependency conflict resolution" >> $GITHUB_STEP_SUMMARY
          echo "- **Reproducible Builds**: Exact versions locked" >> $GITHUB_STEP_SUMMARY
