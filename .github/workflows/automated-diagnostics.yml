name: üî¨ Automated Diagnostics & Validation

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production ]
  schedule:
    # Run comprehensive diagnostics daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      diagnostic_level:
        description: 'üî¨ Diagnostic depth'
        required: false
        default: 'comprehensive'
        type: choice
        options:
          - 'basic'
          - 'comprehensive'
          - 'full-system'
      include_performance:
        description: 'üìä Include performance benchmarks'
        required: false
        default: 'true'
        type: boolean
      generate_report:
        description: 'üìã Generate detailed report'
        required: false
        default: 'true'
        type: boolean

defaults:
  run:
    working-directory: ./mivaa-pdf-extractor

jobs:
  system-diagnostics:
    name: üî¨ System Diagnostics
    runs-on: ubuntu-latest
    outputs:
      system_health: ${{ steps.health.outputs.system_health }}
      dependency_status: ${{ steps.deps.outputs.dependency_status }}
      performance_score: ${{ steps.perf.outputs.performance_score }}
      security_score: ${{ steps.security.outputs.security_score }}
      deployment_readiness: ${{ steps.readiness.outputs.deployment_readiness }}
      issues_found: ${{ steps.summary.outputs.issues_found }}
      recommendations: ${{ steps.summary.outputs.recommendations }}
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üîß Install diagnostic tools
        run: |
          echo "üîß Installing comprehensive diagnostic tools..."
          python -m pip install --upgrade pip setuptools wheel
          pip install pip-tools==7.3.0
          pip install safety bandit pytest pytest-cov
          
          # Make scripts executable
          chmod +x scripts/*.sh scripts/*.py 2>/dev/null || true

      - name: üè• System health check
        id: health
        run: |
          echo "üè• Performing comprehensive system health check..."
          
          HEALTH_SCORE=100
          HEALTH_ISSUES=()
          
          # Check file structure
          REQUIRED_FILES=(
            "requirements.in"
            "requirements.txt"
            "app/main.py"
            "scripts/prepare-deployment-deps.sh"
            "scripts/validate-deployment-readiness.py"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -f "$file" ]]; then
              HEALTH_ISSUES+=("Missing file: $file")
              ((HEALTH_SCORE -= 10))
            fi
          done
          
          # Check Python syntax
          if ! python -m py_compile app/main.py 2>/dev/null; then
            HEALTH_ISSUES+=("Python syntax errors in main application")
            ((HEALTH_SCORE -= 20))
          fi
          
          # Check script syntax
          for script in scripts/*.sh; do
            if [[ -f "$script" ]] && ! bash -n "$script" 2>/dev/null; then
              HEALTH_ISSUES+=("Syntax error in $script")
              ((HEALTH_SCORE -= 5))
            fi
          done
          
          # Determine health status
          if [[ $HEALTH_SCORE -ge 90 ]]; then
            SYSTEM_HEALTH="excellent"
          elif [[ $HEALTH_SCORE -ge 70 ]]; then
            SYSTEM_HEALTH="good"
          elif [[ $HEALTH_SCORE -ge 50 ]]; then
            SYSTEM_HEALTH="fair"
          else
            SYSTEM_HEALTH="poor"
          fi
          
          echo "system_health=$SYSTEM_HEALTH" >> $GITHUB_OUTPUT
          echo "health_score=$HEALTH_SCORE" >> $GITHUB_OUTPUT
          
          echo "üè• System Health: $SYSTEM_HEALTH ($HEALTH_SCORE/100)"
          if [[ ${#HEALTH_ISSUES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Issues found:"
            printf '   - %s\n' "${HEALTH_ISSUES[@]}"
          fi

      - name: üì¶ Dependency diagnostics
        id: deps
        run: |
          echo "üì¶ Running comprehensive dependency diagnostics..."
          
          DEPENDENCY_SCORE=100
          DEPENDENCY_ISSUES=()
          
          # Check requirements.txt format
          if [[ -f "requirements.txt" ]]; then
            # Check for security hashes
            if ! grep -q "sha256:" requirements.txt; then
              DEPENDENCY_ISSUES+=("Missing security hashes in requirements.txt")
              ((DEPENDENCY_SCORE -= 30))
            fi
            
            # Check for pinned versions
            TOTAL_PACKAGES=$(grep -c "^[a-zA-Z]" requirements.txt || echo "0")
            PINNED_PACKAGES=$(grep -c "==" requirements.txt || echo "0")
            
            if [[ $TOTAL_PACKAGES -gt 0 ]]; then
              PINNED_PERCENTAGE=$((PINNED_PACKAGES * 100 / TOTAL_PACKAGES))
              if [[ $PINNED_PERCENTAGE -lt 90 ]]; then
                DEPENDENCY_ISSUES+=("Only $PINNED_PERCENTAGE% of packages are pinned")
                ((DEPENDENCY_SCORE -= 20))
              fi
            fi
            
            # Check if requirements.txt is newer than requirements.in
            if [[ -f "requirements.in" && "requirements.in" -nt "requirements.txt" ]]; then
              DEPENDENCY_ISSUES+=("requirements.txt is outdated")
              ((DEPENDENCY_SCORE -= 25))
            fi
          else
            DEPENDENCY_ISSUES+=("requirements.txt not found")
            DEPENDENCY_SCORE=0
          fi
          
          # Test dependency installation
          echo "üß™ Testing dependency installation..."
          python -m venv test_deps_env
          source test_deps_env/bin/activate
          
          if pip install -r requirements.txt --dry-run --quiet 2>/dev/null; then
            echo "‚úÖ Dependencies can be installed"
          else
            DEPENDENCY_ISSUES+=("Dependency installation test failed")
            ((DEPENDENCY_SCORE -= 15))
          fi
          
          deactivate
          rm -rf test_deps_env
          
          # Determine dependency status
          if [[ $DEPENDENCY_SCORE -ge 90 ]]; then
            DEPENDENCY_STATUS="excellent"
          elif [[ $DEPENDENCY_SCORE -ge 70 ]]; then
            DEPENDENCY_STATUS="good"
          elif [[ $DEPENDENCY_SCORE -ge 50 ]]; then
            DEPENDENCY_STATUS="fair"
          else
            DEPENDENCY_STATUS="poor"
          fi
          
          echo "dependency_status=$DEPENDENCY_STATUS" >> $GITHUB_OUTPUT
          echo "dependency_score=$DEPENDENCY_SCORE" >> $GITHUB_OUTPUT
          
          echo "üì¶ Dependency Status: $DEPENDENCY_STATUS ($DEPENDENCY_SCORE/100)"
          if [[ ${#DEPENDENCY_ISSUES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Issues found:"
            printf '   - %s\n' "${DEPENDENCY_ISSUES[@]}"
          fi

      - name: üìä Performance benchmarks
        id: perf
        if: github.event.inputs.include_performance != 'false'
        run: |
          echo "üìä Running performance benchmarks..."
          
          PERFORMANCE_SCORE=100
          PERFORMANCE_ISSUES=()
          
          # Test dependency installation speed
          echo "‚ö° Testing dependency installation speed..."
          START_TIME=$(date +%s)
          
          python -m venv perf_test_env
          source perf_test_env/bin/activate
          
          # Simulate optimized installation
          if grep -q "sha256:" requirements.txt; then
            pip install -r requirements.txt --no-deps --dry-run --quiet
          else
            pip install -r requirements.txt --dry-run --quiet
          fi
          
          END_TIME=$(date +%s)
          INSTALL_TIME=$((END_TIME - START_TIME))
          
          deactivate
          rm -rf perf_test_env
          
          # Performance scoring
          if [[ $INSTALL_TIME -le 10 ]]; then
            echo "üöÄ Excellent installation speed: ${INSTALL_TIME}s"
          elif [[ $INSTALL_TIME -le 30 ]]; then
            echo "‚ö° Good installation speed: ${INSTALL_TIME}s"
            ((PERFORMANCE_SCORE -= 10))
          elif [[ $INSTALL_TIME -le 60 ]]; then
            echo "üëç Acceptable installation speed: ${INSTALL_TIME}s"
            ((PERFORMANCE_SCORE -= 20))
          else
            echo "üêå Slow installation speed: ${INSTALL_TIME}s"
            PERFORMANCE_ISSUES+=("Slow dependency installation: ${INSTALL_TIME}s")
            ((PERFORMANCE_SCORE -= 40))
          fi
          
          # Check file sizes
          if [[ -f "requirements.txt" ]]; then
            REQ_SIZE=$(wc -c < requirements.txt)
            if [[ $REQ_SIZE -gt 100000 ]]; then  # 100KB
              PERFORMANCE_ISSUES+=("Large requirements.txt file: ${REQ_SIZE} bytes")
              ((PERFORMANCE_SCORE -= 10))
            fi
          fi
          
          echo "performance_score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          echo "install_time=$INSTALL_TIME" >> $GITHUB_OUTPUT
          
          echo "üìä Performance Score: $PERFORMANCE_SCORE/100"
          if [[ ${#PERFORMANCE_ISSUES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Performance issues:"
            printf '   - %s\n' "${PERFORMANCE_ISSUES[@]}"
          fi

      - name: üîí Security analysis
        id: security
        run: |
          echo "üîí Running comprehensive security analysis..."
          
          SECURITY_SCORE=100
          SECURITY_ISSUES=()
          
          # Check for security hashes
          if [[ -f "requirements.txt" ]] && ! grep -q "sha256:" requirements.txt; then
            SECURITY_ISSUES+=("No package integrity hashes found")
            ((SECURITY_SCORE -= 40))
          fi
          
          # Check for known vulnerabilities (if safety is available)
          if command -v safety &> /dev/null && [[ -f "requirements.txt" ]]; then
            echo "üîç Checking for known vulnerabilities..."
            if ! safety check -r requirements.txt --json > safety_report.json 2>/dev/null; then
              VULNERABILITY_COUNT=$(jq '.vulnerabilities | length' safety_report.json 2>/dev/null || echo "0")
              if [[ $VULNERABILITY_COUNT -gt 0 ]]; then
                SECURITY_ISSUES+=("$VULNERABILITY_COUNT known vulnerabilities found")
                ((SECURITY_SCORE -= $((VULNERABILITY_COUNT * 10))))
              fi
            fi
            rm -f safety_report.json
          fi
          
          # Check for hardcoded secrets (basic patterns)
          if grep -r -i "password\|secret\|key\|token" app/ --include="*.py" | grep -v "# " | grep -v "def " | head -5; then
            SECURITY_ISSUES+=("Potential hardcoded secrets detected")
            ((SECURITY_SCORE -= 20))
          fi
          
          # Ensure security score doesn't go below 0
          [[ $SECURITY_SCORE -lt 0 ]] && SECURITY_SCORE=0
          
          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          
          echo "üîí Security Score: $SECURITY_SCORE/100"
          if [[ ${#SECURITY_ISSUES[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Security issues:"
            printf '   - %s\n' "${SECURITY_ISSUES[@]}"
          fi

      - name: üöÄ Deployment readiness assessment
        id: readiness
        run: |
          echo "üöÄ Assessing deployment readiness..."
          
          # Run the comprehensive validation script
          if python scripts/validate-deployment-readiness.py; then
            DEPLOYMENT_READINESS="ready"
            echo "‚úÖ Deployment readiness: READY"
          else
            DEPLOYMENT_READINESS="not-ready"
            echo "‚ùå Deployment readiness: NOT READY"
          fi
          
          echo "deployment_readiness=$DEPLOYMENT_READINESS" >> $GITHUB_OUTPUT

      - name: üìã Generate diagnostic summary
        id: summary
        run: |
          echo "üìã Generating comprehensive diagnostic summary..."
          
          TOTAL_ISSUES=0
          ALL_RECOMMENDATIONS=()
          
          # Collect all issues and recommendations
          if [[ "${{ steps.health.outputs.system_health }}" != "excellent" ]]; then
            ((TOTAL_ISSUES++))
            ALL_RECOMMENDATIONS+=("Improve system health")
          fi
          
          if [[ "${{ steps.deps.outputs.dependency_status }}" != "excellent" ]]; then
            ((TOTAL_ISSUES++))
            ALL_RECOMMENDATIONS+=("Optimize dependencies")
          fi
          
          if [[ "${{ steps.perf.outputs.performance_score }}" -lt 90 ]]; then
            ((TOTAL_ISSUES++))
            ALL_RECOMMENDATIONS+=("Enhance performance")
          fi
          
          if [[ "${{ steps.security.outputs.security_score }}" -lt 90 ]]; then
            ((TOTAL_ISSUES++))
            ALL_RECOMMENDATIONS+=("Address security issues")
          fi
          
          if [[ "${{ steps.readiness.outputs.deployment_readiness }}" != "ready" ]]; then
            ((TOTAL_ISSUES++))
            ALL_RECOMMENDATIONS+=("Fix deployment blockers")
          fi
          
          # Convert recommendations array to comma-separated string
          RECOMMENDATIONS_STRING=""
          for rec in "${ALL_RECOMMENDATIONS[@]}"; do
            RECOMMENDATIONS_STRING="${RECOMMENDATIONS_STRING}${rec},"
          done
          RECOMMENDATIONS_STRING=$(echo "$RECOMMENDATIONS_STRING" | sed 's/,$//')
          
          echo "issues_found=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "recommendations=$RECOMMENDATIONS_STRING" >> $GITHUB_OUTPUT
          
          echo "üìä Diagnostic Summary:"
          echo "   - Total Issues: $TOTAL_ISSUES"
          echo "   - Recommendations: $RECOMMENDATIONS_STRING"

  generate-diagnostic-report:
    name: üìä Generate Diagnostic Report
    runs-on: ubuntu-latest
    needs: system-diagnostics
    if: always() && github.event.inputs.generate_report != 'false'
    
    steps:
      - name: üìä Generate comprehensive diagnostic report
        run: |
          echo "## üî¨ Automated Diagnostics Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall System Status
          OVERALL_STATUS="üü¢ Excellent"
          if [[ "${{ needs.system-diagnostics.outputs.issues_found }}" -gt 3 ]]; then
            OVERALL_STATUS="üî¥ Needs Attention"
          elif [[ "${{ needs.system-diagnostics.outputs.issues_found }}" -gt 1 ]]; then
            OVERALL_STATUS="üü° Good"
          fi
          
          echo "### $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Diagnostic Scores
          echo "### üìä Diagnostic Scores" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Score |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **System Health** | ${{ needs.system-diagnostics.outputs.system_health == 'excellent' && 'üü¢' || needs.system-diagnostics.outputs.system_health == 'good' && 'üü°' || 'üî¥' }} | ${{ needs.system-diagnostics.outputs.system_health }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Dependencies** | ${{ needs.system-diagnostics.outputs.dependency_status == 'excellent' && 'üü¢' || needs.system-diagnostics.outputs.dependency_status == 'good' && 'üü°' || 'üî¥' }} | ${{ needs.system-diagnostics.outputs.dependency_status }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Performance** | ${{ needs.system-diagnostics.outputs.performance_score >= 90 && 'üü¢' || needs.system-diagnostics.outputs.performance_score >= 70 && 'üü°' || 'üî¥' }} | ${{ needs.system-diagnostics.outputs.performance_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security** | ${{ needs.system-diagnostics.outputs.security_score >= 90 && 'üü¢' || needs.system-diagnostics.outputs.security_score >= 70 && 'üü°' || 'üî¥' }} | ${{ needs.system-diagnostics.outputs.security_score }}/100 |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployment Ready** | ${{ needs.system-diagnostics.outputs.deployment_readiness == 'ready' && '‚úÖ' || '‚ùå' }} | ${{ needs.system-diagnostics.outputs.deployment_readiness }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Issues and Recommendations
          if [[ "${{ needs.system-diagnostics.outputs.issues_found }}" -gt 0 ]]; then
            echo "### üéØ Recommendations" >> $GITHUB_STEP_SUMMARY
            echo "Based on the diagnostic analysis, consider the following actions:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            IFS=',' read -ra RECS <<< "${{ needs.system-diagnostics.outputs.recommendations }}"
            for rec in "${RECS[@]}"; do
              echo "- üîß **$rec**" >> $GITHUB_STEP_SUMMARY
            done
          else
            echo "### ‚úÖ All Systems Optimal" >> $GITHUB_STEP_SUMMARY
            echo "No issues detected - system is performing excellently!" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Automation Status
          echo "### ü§ñ Automation Status" >> $GITHUB_STEP_SUMMARY
          echo "- üî¨ **Automated Diagnostics**: ‚úÖ Active" >> $GITHUB_STEP_SUMMARY
          echo "- üìä **Performance Monitoring**: ‚úÖ Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- üîí **Security Scanning**: ‚úÖ Operational" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Deployment Validation**: ‚úÖ Configured" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Intelligent Reporting**: ‚úÖ Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "üî¨ **Powered by Automated Diagnostics** | üïê Generated: $(date)" >> $GITHUB_STEP_SUMMARY
