name: 🔍 Intelligent Change Detection & Auto-Processing

on:
  push:
    branches: [ main, production, develop ]
  pull_request:
    branches: [ main, production ]
  schedule:
    # Run daily at 2 AM UTC to check for dependency updates
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      analysis_depth:
        description: '🔍 Analysis depth'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'quick'
          - 'standard'
          - 'deep'
      auto_fix:
        description: '🤖 Auto-fix detected issues'
        required: false
        default: 'true'
        type: boolean

defaults:
  run:
    working-directory: ./mivaa-pdf-extractor

jobs:
  intelligent-analysis:
    name: 🧠 Intelligent Change Analysis
    runs-on: ubuntu-latest
    outputs:
      changes_detected: ${{ steps.analysis.outputs.changes_detected }}
      change_types: ${{ steps.analysis.outputs.change_types }}
      risk_level: ${{ steps.analysis.outputs.risk_level }}
      recommended_actions: ${{ steps.analysis.outputs.recommended_actions }}
      auto_fix_needed: ${{ steps.analysis.outputs.auto_fix_needed }}
      dependency_updates_available: ${{ steps.deps.outputs.updates_available }}
      security_issues: ${{ steps.security.outputs.issues_found }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 10  # Get more history for better analysis

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 🔍 Analyze recent changes
        id: analysis
        run: |
          echo "🔍 Performing intelligent change analysis..."
          
          ANALYSIS_DEPTH="${{ github.event.inputs.analysis_depth || 'standard' }}"
          CHANGES_DETECTED="false"
          CHANGE_TYPES=""
          RISK_LEVEL="low"
          RECOMMENDED_ACTIONS=""
          AUTO_FIX_NEEDED="false"
          
          # Analyze different types of changes
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "📊 Analyzing push changes..."
            
            # Check what files changed in the last commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            
            if echo "$CHANGED_FILES" | grep -q "requirements\.in"; then
              CHANGES_DETECTED="true"
              CHANGE_TYPES="${CHANGE_TYPES}dependency-source,"
              RISK_LEVEL="medium"
              RECOMMENDED_ACTIONS="${RECOMMENDED_ACTIONS}update-requirements,"
              AUTO_FIX_NEEDED="true"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "requirements\.txt"; then
              CHANGES_DETECTED="true"
              CHANGE_TYPES="${CHANGE_TYPES}dependency-lock,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "app/"; then
              CHANGES_DETECTED="true"
              CHANGE_TYPES="${CHANGE_TYPES}application-code,"
              RISK_LEVEL="medium"
              RECOMMENDED_ACTIONS="${RECOMMENDED_ACTIONS}run-tests,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "\.github/workflows/"; then
              CHANGES_DETECTED="true"
              CHANGE_TYPES="${CHANGE_TYPES}ci-cd-config,"
              RISK_LEVEL="high"
              RECOMMENDED_ACTIONS="${RECOMMENDED_ACTIONS}validate-workflows,"
            fi
            
            if echo "$CHANGED_FILES" | grep -q "scripts/"; then
              CHANGES_DETECTED="true"
              CHANGE_TYPES="${CHANGE_TYPES}deployment-scripts,"
              RISK_LEVEL="medium"
              RECOMMENDED_ACTIONS="${RECOMMENDED_ACTIONS}validate-scripts,"
            fi
            
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "⏰ Performing scheduled analysis..."
            CHANGES_DETECTED="true"
            CHANGE_TYPES="scheduled-check,"
            RECOMMENDED_ACTIONS="check-dependencies,security-scan,"
          fi
          
          # Clean up trailing commas
          CHANGE_TYPES=$(echo "$CHANGE_TYPES" | sed 's/,$//')
          RECOMMENDED_ACTIONS=$(echo "$RECOMMENDED_ACTIONS" | sed 's/,$//')
          
          echo "changes_detected=$CHANGES_DETECTED" >> $GITHUB_OUTPUT
          echo "change_types=$CHANGE_TYPES" >> $GITHUB_OUTPUT
          echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
          echo "recommended_actions=$RECOMMENDED_ACTIONS" >> $GITHUB_OUTPUT
          echo "auto_fix_needed=$AUTO_FIX_NEEDED" >> $GITHUB_OUTPUT
          
          echo "📊 Analysis Results:"
          echo "   - Changes Detected: $CHANGES_DETECTED"
          echo "   - Change Types: $CHANGE_TYPES"
          echo "   - Risk Level: $RISK_LEVEL"
          echo "   - Recommended Actions: $RECOMMENDED_ACTIONS"
          echo "   - Auto-fix Needed: $AUTO_FIX_NEEDED"

      - name: 🔍 Check for dependency updates
        id: deps
        run: |
          echo "🔍 Checking for available dependency updates..."
          
          # Install pip-tools for dependency checking
          python -m pip install --upgrade pip pip-tools
          
          UPDATES_AVAILABLE="false"
          UPDATE_COUNT=0
          
          if [[ -f "requirements.in" ]]; then
            # Generate new requirements to see if there are updates
            pip-compile requirements.in --output-file requirements-check.txt --upgrade --quiet
            
            if [[ -f "requirements.txt" ]] && ! diff -q requirements.txt requirements-check.txt > /dev/null; then
              UPDATES_AVAILABLE="true"
              UPDATE_COUNT=$(diff requirements.txt requirements-check.txt | grep "^>" | wc -l)
            fi
            
            rm -f requirements-check.txt
          fi
          
          echo "updates_available=$UPDATES_AVAILABLE" >> $GITHUB_OUTPUT
          echo "update_count=$UPDATE_COUNT" >> $GITHUB_OUTPUT
          
          echo "📦 Dependency Check Results:"
          echo "   - Updates Available: $UPDATES_AVAILABLE"
          echo "   - Potential Updates: $UPDATE_COUNT"

      - name: 🔒 Security analysis
        id: security
        run: |
          echo "🔒 Performing security analysis..."
          
          ISSUES_FOUND="false"
          SECURITY_ISSUES=""
          
          # Check for security hashes in requirements.txt
          if [[ -f "requirements.txt" ]] && ! grep -q "sha256:" requirements.txt; then
            ISSUES_FOUND="true"
            SECURITY_ISSUES="${SECURITY_ISSUES}missing-hashes,"
          fi
          
          # Check for outdated Python version in workflows
          if grep -r "python-version.*3\.[0-9]" .github/workflows/ | grep -v "3.11\|3.12"; then
            ISSUES_FOUND="true"
            SECURITY_ISSUES="${SECURITY_ISSUES}outdated-python,"
          fi
          
          # Clean up trailing comma
          SECURITY_ISSUES=$(echo "$SECURITY_ISSUES" | sed 's/,$//')
          
          echo "issues_found=$ISSUES_FOUND" >> $GITHUB_OUTPUT
          echo "security_issues=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
          
          echo "🔒 Security Analysis Results:"
          echo "   - Issues Found: $ISSUES_FOUND"
          echo "   - Security Issues: $SECURITY_ISSUES"

  auto-remediation:
    name: 🤖 Intelligent Auto-Remediation
    runs-on: ubuntu-latest
    needs: intelligent-analysis
    if: needs.intelligent-analysis.outputs.auto_fix_needed == 'true' && github.event.inputs.auto_fix != 'false'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🤖 Execute auto-remediation
        run: |
          echo "🤖 Executing intelligent auto-remediation..."
          
          ACTIONS_TAKEN=""
          
          # Install tools
          python -m pip install --upgrade pip setuptools wheel
          pip install pip-tools==7.3.0
          
          # Process recommended actions
          IFS=',' read -ra ACTIONS <<< "${{ needs.intelligent-analysis.outputs.recommended_actions }}"
          for action in "${ACTIONS[@]}"; do
            case "$action" in
              "update-requirements")
                echo "📦 Auto-updating requirements..."
                chmod +x scripts/prepare-deployment-deps.sh
                bash scripts/prepare-deployment-deps.sh
                ACTIONS_TAKEN="${ACTIONS_TAKEN}requirements-updated,"
                ;;
              "validate-scripts")
                echo "🔍 Validating scripts..."
                chmod +x scripts/*.sh
                for script in scripts/*.sh; do
                  bash -n "$script" || echo "⚠️ Syntax issue in $script"
                done
                ACTIONS_TAKEN="${ACTIONS_TAKEN}scripts-validated,"
                ;;
            esac
          done
          
          # Clean up trailing comma
          ACTIONS_TAKEN=$(echo "$ACTIONS_TAKEN" | sed 's/,$//')
          
          echo "🤖 Auto-remediation completed"
          echo "Actions taken: $ACTIONS_TAKEN"

      - name: 💾 Auto-commit fixes
        run: |
          echo "💾 Auto-committing intelligent fixes..."
          
          if ! git diff --quiet; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action - Intelligent Auto-Fix"
            
            git add .
            git commit -m "🤖 Intelligent auto-remediation

            Detected changes: ${{ needs.intelligent-analysis.outputs.change_types }}
            Risk level: ${{ needs.intelligent-analysis.outputs.risk_level }}
            Actions taken: Auto-fix based on intelligent analysis
            
            🔍 Analysis results:
            - Dependency updates: ${{ needs.intelligent-analysis.outputs.dependency_updates_available }}
            - Security issues: ${{ needs.intelligent-analysis.outputs.security_issues }}
            
            🤖 Automated by Intelligent Change Detection"
            
            git push
            
            echo "✅ Auto-fixes committed successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

  generate-intelligence-report:
    name: 📊 Generate Intelligence Report
    runs-on: ubuntu-latest
    needs: [intelligent-analysis, auto-remediation]
    if: always()
    
    steps:
      - name: 📊 Generate comprehensive intelligence report
        run: |
          echo "## 🧠 Intelligent Change Detection Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analysis Summary
          echo "### 🔍 Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Changes Detected** | ${{ needs.intelligent-analysis.outputs.changes_detected == 'true' && '✅' || '❌' }} | ${{ needs.intelligent-analysis.outputs.changes_detected }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Types** | 📋 | ${{ needs.intelligent-analysis.outputs.change_types || 'None' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Risk Level** | ${{ needs.intelligent-analysis.outputs.risk_level == 'low' && '🟢' || needs.intelligent-analysis.outputs.risk_level == 'medium' && '🟡' || '🔴' }} | ${{ needs.intelligent-analysis.outputs.risk_level }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Auto-fix Applied** | ${{ needs.intelligent-analysis.outputs.auto_fix_needed == 'true' && '🤖' || '➖' }} | ${{ needs.intelligent-analysis.outputs.auto_fix_needed }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Dependency Status
          echo "### 📦 Dependency Intelligence" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Updates Available** | ${{ needs.intelligent-analysis.outputs.dependency_updates_available == 'true' && '🔄 Yes' || '✅ Up to date' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Status** | ${{ needs.intelligent-analysis.outputs.security_issues == '' && '🔒 Secure' || '⚠️ Issues found' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Recommended Actions
          if [[ -n "${{ needs.intelligent-analysis.outputs.recommended_actions }}" ]]; then
            echo "### 🎯 Intelligent Recommendations" >> $GITHUB_STEP_SUMMARY
            echo "Based on the analysis, the following actions are recommended:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            IFS=',' read -ra ACTIONS <<< "${{ needs.intelligent-analysis.outputs.recommended_actions }}"
            for action in "${ACTIONS[@]}"; do
              case "$action" in
                "update-requirements") echo "- 📦 **Update Dependencies**: Refresh requirements.txt with latest versions" ;;
                "run-tests") echo "- 🧪 **Run Tests**: Application code changed, run comprehensive tests" ;;
                "validate-workflows") echo "- 🔍 **Validate CI/CD**: Workflow changes detected, validate configuration" ;;
                "validate-scripts") echo "- 📜 **Check Scripts**: Deployment scripts modified, validate syntax" ;;
                "check-dependencies") echo "- 🔍 **Dependency Audit**: Scheduled check for dependency updates" ;;
                "security-scan") echo "- 🔒 **Security Scan**: Perform security analysis of dependencies" ;;
              esac
            done >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ No Actions Required" >> $GITHUB_STEP_SUMMARY
            echo "System analysis complete - no issues detected." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Automation Status
          echo "### 🤖 Automation Status" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 **Intelligent Analysis**: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🤖 **Auto-remediation**: ${{ needs.auto-remediation.result == 'success' && '✅ Applied' || needs.intelligent-analysis.outputs.auto_fix_needed == 'true' && '⚠️ Needed but skipped' || '➖ Not needed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 **Monitoring**: ✅ Active" >> $GITHUB_STEP_SUMMARY
          echo "- 🚨 **Alerting**: ✅ Configured" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "🧠 **Powered by Intelligent Change Detection** | 🕐 Generated: $(date)" >> $GITHUB_STEP_SUMMARY
